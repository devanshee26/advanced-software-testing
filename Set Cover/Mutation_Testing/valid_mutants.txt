1.
\* ==> +

mutant:
/+


2.
\* ==> -

mutant:
/-


3.
\* ==> /

mutant:
//


4.
\* ==> %

mutant:
/%


5.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
/*
break;


6.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
/*
continue;


7.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*/**/


8.
\* ==> +

mutant:
 + SetCover.c


9.
\* ==> -

mutant:
 - SetCover.c


10.
\* ==> /

mutant:
 / SetCover.c


11.
\* ==> %

mutant:
 % SetCover.c


12.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
 * SetCover.c
 break;


13.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
 * SetCover.c
 continue;


14.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
 /** SetCover.c*/


15.
\* ==> +

mutant:
 +/


16.
\* ==> -

mutant:
 -/


17.
\* ==> /

mutant:
 //


18.
\* ==> %

mutant:
 %/


19.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
 */
 break;


20.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
 */
 continue;


21.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
 /**/*/


22.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
char inbuf[0];


23.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
char inbuf[1];


24.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
char inbuf[-1];


25.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
char inbuf[(1024+1)];


26.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
char inbuf[(1024-1)];


27.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
char inbuf[1024];
break;


28.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
char inbuf[1024];
continue;


29.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*char inbuf[1024];*/


30.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
char _file[0];


31.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
char _file[1];


32.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
char _file[-1];


33.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
char _file[(1024+1)];


34.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
char _file[(1024-1)];


35.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
char _file[1024];
break;


36.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
char _file[1024];
continue;


37.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*char _file[1024];*/


38.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
typedef struct Set Set;
break;


39.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
typedef struct Set Set;
continue;


40.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*typedef struct Set Set;*/


41.
\* ==> +

mutant:
struct Set /+ the state of the game at each possible move */


42.
\* ==> +

mutant:
struct Set /* the state of the game at each possible move +/


43.
\* ==> -

mutant:
struct Set /- the state of the game at each possible move */


44.
\* ==> -

mutant:
struct Set /* the state of the game at each possible move -/


45.
\* ==> /

mutant:
struct Set // the state of the game at each possible move */


46.
\* ==> /

mutant:
struct Set /* the state of the game at each possible move //


47.
\* ==> %

mutant:
struct Set /% the state of the game at each possible move */


48.
\* ==> %

mutant:
struct Set /* the state of the game at each possible move %/


49.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
struct Set /* the state of the game at each possible move */
break;


50.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
struct Set /* the state of the game at each possible move */
continue;


51.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*struct Set /* the state of the game at each possible move */*/


52.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
{
break;


53.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
{
continue;


54.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int nGlobalSetSize;
	break;


55.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int nGlobalSetSize;
	continue;


56.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int nGlobalSetSize;*/


57.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int nSubSets;
	break;


58.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int nSubSets;
	continue;


59.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int nSubSets;*/


60.
\* ==> +

mutant:
	int+ originalOrder;


61.
\* ==> -

mutant:
	int- originalOrder;


62.
\* ==> /

mutant:
	int/ originalOrder;


63.
\* ==> %

mutant:
	int% originalOrder;


64.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int* originalOrder;
	break;


65.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int* originalOrder;
	continue;


66.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int* originalOrder;*/


67.
\* ==> +

mutant:
	int+ nSubSetSizes;


68.
\* ==> -

mutant:
	int- nSubSetSizes;


69.
\* ==> /

mutant:
	int/ nSubSetSizes;


70.
\* ==> %

mutant:
	int% nSubSetSizes;


71.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int* nSubSetSizes;
	break;


72.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int* nSubSetSizes;
	continue;


73.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int* nSubSetSizes;*/


74.
\* ==> +

mutant:
	int+* subsets;


75.
\* ==> +

mutant:
	int*+ subsets;


76.
\* ==> -

mutant:
	int-* subsets;


77.
\* ==> -

mutant:
	int*- subsets;


78.
\* ==> /

mutant:
	int/* subsets;


79.
\* ==> /

mutant:
	int*/ subsets;


80.
\* ==> %

mutant:
	int%* subsets;


81.
\* ==> %

mutant:
	int*% subsets;


82.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int** subsets;
	break;


83.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int** subsets;
	continue;


84.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int** subsets;*/


85.
\* ==> +

mutant:
	int+* subSetsSizesSum;


86.
\* ==> +

mutant:
	int*+ subSetsSizesSum;


87.
\* ==> -

mutant:
	int-* subSetsSizesSum;


88.
\* ==> -

mutant:
	int*- subSetsSizesSum;


89.
\* ==> /

mutant:
	int/* subSetsSizesSum;


90.
\* ==> /

mutant:
	int*/ subSetsSizesSum;


91.
\* ==> %

mutant:
	int%* subSetsSizesSum;


92.
\* ==> %

mutant:
	int*% subSetsSizesSum;


93.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int** subSetsSizesSum;
	break;


94.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int** subSetsSizesSum;
	continue;


95.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int** subSetsSizesSum;*/


96.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
};
break;


97.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
};
continue;


98.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*};*/


99.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
typedef struct Solution Solution;
break;


100.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
typedef struct Solution Solution;
continue;


101.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*typedef struct Solution Solution;*/


102.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
struct Solution
break;


103.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
struct Solution
continue;


104.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*struct Solution*/


105.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
{
break;


106.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
{
continue;


107.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int nSolutionSize;
	break;


108.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int nSolutionSize;
	continue;


109.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int nSolutionSize;*/


110.
\* ==> +

mutant:
	int+ subSets;


111.
\* ==> -

mutant:
	int- subSets;


112.
\* ==> /

mutant:
	int/ subSets;


113.
\* ==> %

mutant:
	int% subSets;


114.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int* subSets;
	break;


115.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int* subSets;
	continue;


116.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int* subSets;*/


117.
\* ==> +

mutant:
	int+ boolIncluded;


118.
\* ==> -

mutant:
	int- boolIncluded;


119.
\* ==> /

mutant:
	int/ boolIncluded;


120.
\* ==> %

mutant:
	int% boolIncluded;


121.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int* boolIncluded;
	break;


122.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int* boolIncluded;
	continue;


123.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int* boolIncluded;*/


124.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
};
break;


125.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
};
continue;


126.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*};*/


127.
\* ==> +

mutant:
Set+ set;


128.
\* ==> -

mutant:
Set- set;


129.
\* ==> /

mutant:
Set/ set;


130.
\* ==> %

mutant:
Set% set;


131.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
Set* set;
break;


132.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
Set* set;
continue;


133.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*Set* set;*/


134.
\* ==> +

mutant:
Solution+ solution;


135.
\* ==> -

mutant:
Solution- solution;


136.
\* ==> /

mutant:
Solution/ solution;


137.
\* ==> %

mutant:
Solution% solution;


138.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
Solution* solution;
break;


139.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
Solution* solution;
continue;


140.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*Solution* solution;*/


141.
\* ==> +

mutant:
Solution+ bestSolution;


142.
\* ==> -

mutant:
Solution- bestSolution;


143.
\* ==> /

mutant:
Solution/ bestSolution;


144.
\* ==> %

mutant:
Solution% bestSolution;


145.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
Solution* bestSolution;
break;


146.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
Solution* bestSolution;
continue;


147.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*Solution* bestSolution;*/


148.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
void intHandler(int dummy) {
break;


149.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
void intHandler(int dummy) {
continue;


150.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*void intHandler(int dummy) {*/


151.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	printSolution(bestSolution);
	break;


152.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	printSolution(bestSolution);
	continue;


153.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*printSolution(bestSolution);*/


154.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
    exit(1);


155.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
    exit(-1);


156.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
    exit((0+1));


157.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
    exit((0-1));


158.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
    exit(0);
    break;


159.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
    exit(0);
    continue;


160.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
    /*exit(0);*/


161.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


162.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


163.
\* ==> +

mutant:
void runSetCover(int argc, char +argv[]) {


164.
\* ==> -

mutant:
void runSetCover(int argc, char -argv[]) {


165.
\* ==> /

mutant:
void runSetCover(int argc, char /argv[]) {


166.
\* ==> %

mutant:
void runSetCover(int argc, char %argv[]) {


167.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
void runSetCover(int argc, char *argv[]) {
break;


168.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
void runSetCover(int argc, char *argv[]) {
continue;


169.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
void runSetCover( char *argv[],int argc) {


170.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*void runSetCover(int argc, char *argv[]) {*/


171.
== ==> !=

mutant:
	if(init_args(argc, argv) != 0) {


172.
== ==> <=

mutant:
	if(init_args(argc, argv) <= 0) {


173.
== ==> >=

mutant:
	if(init_args(argc, argv) >= 0) {


174.
== ==> >

mutant:
	if(init_args(argc, argv) > 0) {


175.
== ==> <

mutant:
	if(init_args(argc, argv) < 0) {


176.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	if(init_args(argc, argv) == 1) {


177.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	if(init_args(argc, argv) == -1) {


178.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	if(init_args(argc, argv) == (0+1)) {


179.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	if(init_args(argc, argv) == (0-1)) {


180.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	if(init_args(argc, argv) == 0) {
	break;


181.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	if(init_args(argc, argv) == 0) {
	continue;


182.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
	if( argv,init_args(argc) == 0) {


183.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
	if(init_args( argv,argc) == 0) {


184.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*if(init_args(argc, argv) == 0) {*/


185.
if(\(.*\)) ==> if (!\1)

mutant:
	if (!(init_args(argc, argv) == 0)) {


186.
if(\(.*\)) ==> if(0==1)

mutant:
	if(0==1) {


187.
if(\(.*\)) ==> if(1==1)

mutant:
	if(1==1) {


188.
== ==> !=

mutant:
		if(readGameFile(_file) != 0) {


189.
== ==> <=

mutant:
		if(readGameFile(_file) <= 0) {


190.
== ==> >=

mutant:
		if(readGameFile(_file) >= 0) {


191.
== ==> >

mutant:
		if(readGameFile(_file) > 0) {


192.
== ==> <

mutant:
		if(readGameFile(_file) < 0) {


193.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		if(readGameFile(_file) == 1) {


194.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		if(readGameFile(_file) == -1) {


195.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		if(readGameFile(_file) == (0+1)) {


196.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		if(readGameFile(_file) == (0-1)) {


197.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		if(readGameFile(_file) == 0) {
		break;


198.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		if(readGameFile(_file) == 0) {
		continue;


199.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*if(readGameFile(_file) == 0) {*/


200.
if(\(.*\)) ==> if (!\1)

mutant:
		if (!(readGameFile(_file) == 0)) {


201.
if(\(.*\)) ==> if(0==1)

mutant:
		if(0==1) {


202.
if(\(.*\)) ==> if(1==1)

mutant:
		if(1==1) {


203.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			sortSubSets();
			break;


204.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			sortSubSets();
			continue;


205.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*sortSubSets();*/


206.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			createSolutionStruct();
			break;


207.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			createSolutionStruct();
			continue;


208.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*createSolutionStruct();*/


209.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			greedy();
			break;


210.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			greedy();
			continue;


211.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*greedy();*/


212.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
			backTrack0(solution, 0, 0);


213.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
			backTrack1(solution, 0, 0);


214.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
			backTrack4(solution, 1, 0);


215.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
			backTrack4(solution, 0, 1);


216.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			backTrack-1(solution, 0, 0);


217.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			backTrack4(solution, -1, 0);


218.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			backTrack4(solution, 0, -1);


219.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			backTrack(4+1)(solution, 0, 0);


220.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			backTrack4(solution, (0+1), 0);


221.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			backTrack4(solution, 0, (0+1));


222.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			backTrack(4-1)(solution, 0, 0);


223.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			backTrack4(solution, (0-1), 0);


224.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			backTrack4(solution, 0, (0-1));


225.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			backTrack4(solution, 0, 0);
			break;


226.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			backTrack4(solution, 0, 0);
			continue;


227.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			backTrack4( 0,solution, 0);


228.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*backTrack4(solution, 0, 0);*/


229.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			printSolution(bestSolution);
			break;


230.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			printSolution(bestSolution);
			continue;


231.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*printSolution(bestSolution);*/


232.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


233.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


234.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


235.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


236.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


237.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


238.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
void greedy() {
break;


239.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
void greedy() {
continue;


240.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*void greedy() {*/


241.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int i;
	break;


242.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int i;
	continue;


243.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int i;*/


244.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int temp;
	break;


245.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int temp;
	continue;


246.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int temp;*/


247.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	bestSolution->nSolutionSize = 1;


248.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	bestSolution->nSolutionSize = -1;


249.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	bestSolution->nSolutionSize = (0+1);


250.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	bestSolution->nSolutionSize = (0-1);


251.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	bestSolution->nSolutionSize = 0;
	break;


252.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	bestSolution->nSolutionSize = 0;
	continue;


253.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*bestSolution->nSolutionSize = 0;*/


254.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	addSubSet(bestSolution, 1);


255.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	addSubSet(bestSolution, -1);


256.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	addSubSet(bestSolution, (0+1));


257.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	addSubSet(bestSolution, (0-1));


258.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	addSubSet(bestSolution, 0);
	break;


259.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	addSubSet(bestSolution, 0);
	continue;


260.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
	addSubSet( 0,bestSolution);


261.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*addSubSet(bestSolution, 0);*/


262.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	int addIndex = 1;


263.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	int addIndex = -1;


264.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	int addIndex = (0+1);


265.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	int addIndex = (0-1);


266.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int addIndex = 0;
	break;


267.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int addIndex = 0;
	continue;


268.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int addIndex = 0;*/


269.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	int addNumber = 1;


270.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	int addNumber = -1;


271.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	int addNumber = (0+1);


272.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	int addNumber = (0-1);


273.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int addNumber = 0;
	break;


274.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int addNumber = 0;
	continue;


275.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int addNumber = 0;*/


276.
! ==>

mutant:
	while(checkSolution(bestSolution)) {


277.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	while(!checkSolution(bestSolution)) {
	break;


278.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	while(!checkSolution(bestSolution)) {
	continue;


279.
while ==> if

mutant:
	if(!checkSolution(bestSolution)) {


280.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*while(!checkSolution(bestSolution)) {*/


281.
while(\(.*\)) ==> while(!\1)

mutant:
	while(!(!checkSolution(bestSolution))) {


282.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		addIndex = 1;


283.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		addIndex = -1;


284.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		addIndex = (0+1);


285.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		addIndex = (0-1);


286.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		addIndex = 0;
		break;


287.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		addIndex = 0;
		continue;


288.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*addIndex = 0;*/


289.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		addNumber = 1;


290.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		addNumber = -1;


291.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		addNumber = (0+1);


292.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		addNumber = (0-1);


293.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		addNumber = 0;
		break;


294.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		addNumber = 0;
		continue;


295.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*addNumber = 0;*/


296.
\+ ==> -

mutant:
		for(i=0; i<set->nSubSets; i-+) {


297.
\+ ==> -

mutant:
		for(i=0; i<set->nSubSets; i+-) {


298.
\+ ==> *

mutant:
		for(i=0; i<set->nSubSets; i*+) {


299.
\+ ==> *

mutant:
		for(i=0; i<set->nSubSets; i+*) {


300.
\+ ==> /

mutant:
		for(i=0; i<set->nSubSets; i/+) {


301.
\+ ==> /

mutant:
		for(i=0; i<set->nSubSets; i+/) {


302.
\+ ==> %

mutant:
		for(i=0; i<set->nSubSets; i%+) {


303.
\+ ==> %

mutant:
		for(i=0; i<set->nSubSets; i+%) {


304.
< ==> >

mutant:
		for(i=0; i>set->nSubSets; i++) {


305.
< ==> ==

mutant:
		for(i=0; i==set->nSubSets; i++) {


306.
< ==> <=

mutant:
		for(i=0; i<=set->nSubSets; i++) {


307.
< ==> >=

mutant:
		for(i=0; i>=set->nSubSets; i++) {


308.
< ==> !=

mutant:
		for(i=0; i!=set->nSubSets; i++) {


309.
\+\+ ==> --

mutant:
		for(i=0; i<set->nSubSets; i--) {


310.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		for(i=1; i<set->nSubSets; i++) {


311.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		for(i=-1; i<set->nSubSets; i++) {


312.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		for(i=(0+1); i<set->nSubSets; i++) {


313.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		for(i=(0-1); i<set->nSubSets; i++) {


314.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		for(i=0; i<set->nSubSets; i++) {
		break;


315.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		for(i=0; i<set->nSubSets; i++) {
		continue;


316.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*for(i=0; i<set->nSubSets; i++) {*/


317.
! ==>

mutant:
			if(containsSubSet(bestSolution, i)) {


318.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			if(!containsSubSet(bestSolution, i)) {
			break;


319.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			if(!containsSubSet(bestSolution, i)) {
			continue;


320.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			if( i,!containsSubSet(bestSolution)) {


321.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			if(!containsSubSet( i,bestSolution)) {


322.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*if(!containsSubSet(bestSolution, i)) {*/


323.
if(\(.*\)) ==> if (!\1)

mutant:
			if (!(!containsSubSet(bestSolution, i))) {


324.
if(\(.*\)) ==> if(0==1)

mutant:
			if(0==1) {


325.
if(\(.*\)) ==> if(1==1)

mutant:
			if(1==1) {


326.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				temp = numberOfUncoveredElements(i);
				break;


327.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				temp = numberOfUncoveredElements(i);
				continue;


328.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*temp = numberOfUncoveredElements(i);*/


329.
([^-])> ==> \1<

mutant:
				if(temp < addNumber) {


330.
([^-])> ==> \1==

mutant:
				if(temp == addNumber) {


331.
([^-])> ==> \1>=

mutant:
				if(temp >= addNumber) {


332.
([^-])> ==> \1<=

mutant:
				if(temp <= addNumber) {


333.
([^-])> ==> \1!=

mutant:
				if(temp != addNumber) {


334.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				if(temp > addNumber) {
				break;


335.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				if(temp > addNumber) {
				continue;


336.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*if(temp > addNumber) {*/


337.
if(\(.*\)) ==> if (!\1)

mutant:
				if (!(temp > addNumber)) {


338.
if(\(.*\)) ==> if(0==1)

mutant:
				if(0==1) {


339.
if(\(.*\)) ==> if(1==1)

mutant:
				if(1==1) {


340.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
					addNumber = temp;
					break;


341.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
					addNumber = temp;
					continue;


342.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
					/*addNumber = temp;*/


343.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
					addIndex = i;
					break;


344.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
					addIndex = i;
					continue;


345.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
					/*addIndex = i;*/


346.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				}
				break;


347.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				}
				continue;


348.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			}
			break;


349.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			}
			continue;


350.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


351.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


352.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		addSubSet(bestSolution, addIndex);
		break;


353.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		addSubSet(bestSolution, addIndex);
		continue;


354.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
		addSubSet( addIndex,bestSolution);


355.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*addSubSet(bestSolution, addIndex);*/


356.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


357.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


358.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	//printSolution(bestSolution);
	break;


359.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	//printSolution(bestSolution);
	continue;


360.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*//printSolution(bestSolution);*/


361.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


362.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


363.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
int numberOfUncoveredElements(int subSetIndex) {
break;


364.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
int numberOfUncoveredElements(int subSetIndex) {
continue;


365.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*int numberOfUncoveredElements(int subSetIndex) {*/


366.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int i;
	break;


367.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int i;
	continue;


368.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int i;*/


369.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	int count=1;


370.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	int count=-1;


371.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	int count=(0+1);


372.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	int count=(0-1);


373.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int count=0;
	break;


374.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int count=0;
	continue;


375.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int count=0;*/


376.
\+ ==> -

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i-+) {


377.
\+ ==> -

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i+-) {


378.
\+ ==> *

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i*+) {


379.
\+ ==> *

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i+*) {


380.
\+ ==> /

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i/+) {


381.
\+ ==> /

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i+/) {


382.
\+ ==> %

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i%+) {


383.
\+ ==> %

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i+%) {


384.
< ==> >

mutant:
	for(i=0; i>set->nSubSetSizes[subSetIndex]; i++) {


385.
< ==> ==

mutant:
	for(i=0; i==set->nSubSetSizes[subSetIndex]; i++) {


386.
< ==> <=

mutant:
	for(i=0; i<=set->nSubSetSizes[subSetIndex]; i++) {


387.
< ==> >=

mutant:
	for(i=0; i>=set->nSubSetSizes[subSetIndex]; i++) {


388.
< ==> !=

mutant:
	for(i=0; i!=set->nSubSetSizes[subSetIndex]; i++) {


389.
\+\+ ==> --

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i--) {


390.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for(i=1; i<set->nSubSetSizes[subSetIndex]; i++) {


391.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for(i=-1; i<set->nSubSetSizes[subSetIndex]; i++) {


392.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for(i=(0+1); i<set->nSubSetSizes[subSetIndex]; i++) {


393.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for(i=(0-1); i<set->nSubSetSizes[subSetIndex]; i++) {


394.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {
	break;


395.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {
	continue;


396.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {*/


397.
-([^>]) ==> +\1

mutant:
		if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] + 1])


398.
-([^>]) ==> *\1

mutant:
		if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] * 1])


399.
-([^>]) ==> /\1

mutant:
		if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] / 1])


400.
-([^>]) ==> %\1

mutant:
		if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] % 1])


401.
-([^>]) ==> \1

mutant:
		if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i]  1])


402.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] - 0])


403.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] - -1])


404.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] - (1+1)])


405.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] - (1-1)])


406.
! ==>

mutant:
		if(bestSolution->boolIncluded[set->subsets[subSetIndex][i] - 1])


407.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] - 1])
		break;


408.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] - 1])
		continue;


409.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*if(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] - 1])*/


410.
if(\(.*\)) ==> if (!\1)

mutant:
		if (!(!bestSolution->boolIncluded[set->subsets[subSetIndex][i] - 1]))


411.
if(\(.*\)) ==> if(0==1)

mutant:
		if(0==1)


412.
if(\(.*\)) ==> if(1==1)

mutant:
		if(1==1)


413.
\+ ==> -

mutant:
			count-+;


414.
\+ ==> -

mutant:
			count+-;


415.
\+ ==> *

mutant:
			count*+;


416.
\+ ==> *

mutant:
			count+*;


417.
\+ ==> /

mutant:
			count/+;


418.
\+ ==> /

mutant:
			count+/;


419.
\+ ==> %

mutant:
			count%+;


420.
\+ ==> %

mutant:
			count+%;


421.
\+\+ ==> --

mutant:
			count--;


422.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			count++;
			break;


423.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			count++;
			continue;


424.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*count++;*/


425.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


426.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


427.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	return count;
	break;


428.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	return count;
	continue;


429.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*return count;*/


430.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


431.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


432.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
void sortSubSets() {
break;


433.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
void sortSubSets() {
continue;


434.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*void sortSubSets() {*/


435.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int i,j;
	break;


436.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int i,j;
	continue;


437.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int i,j;*/


438.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int tempInt;
	break;


439.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int tempInt;
	continue;


440.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int tempInt;*/


441.
\* ==> +

mutant:
	int+ tempIntP;


442.
\* ==> -

mutant:
	int- tempIntP;


443.
\* ==> /

mutant:
	int/ tempIntP;


444.
\* ==> %

mutant:
	int% tempIntP;


445.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int* tempIntP;
	break;


446.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int* tempIntP;
	continue;


447.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int* tempIntP;*/


448.
\+ ==> -

mutant:
	for(i=0; i<set->nSubSets;-+i) {


449.
\+ ==> -

mutant:
	for(i=0; i<set->nSubSets;+-i) {


450.
\+ ==> *

mutant:
	for(i=0; i<set->nSubSets;*+i) {


451.
\+ ==> *

mutant:
	for(i=0; i<set->nSubSets;+*i) {


452.
\+ ==> /

mutant:
	for(i=0; i<set->nSubSets;/+i) {


453.
\+ ==> /

mutant:
	for(i=0; i<set->nSubSets;+/i) {


454.
\+ ==> %

mutant:
	for(i=0; i<set->nSubSets;%+i) {


455.
\+ ==> %

mutant:
	for(i=0; i<set->nSubSets;+%i) {


456.
< ==> >

mutant:
	for(i=0; i>set->nSubSets;++i) {


457.
< ==> ==

mutant:
	for(i=0; i==set->nSubSets;++i) {


458.
< ==> <=

mutant:
	for(i=0; i<=set->nSubSets;++i) {


459.
< ==> >=

mutant:
	for(i=0; i>=set->nSubSets;++i) {


460.
< ==> !=

mutant:
	for(i=0; i!=set->nSubSets;++i) {


461.
\+\+ ==> --

mutant:
	for(i=0; i<set->nSubSets;--i) {


462.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for(i=1; i<set->nSubSets;++i) {


463.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for(i=-1; i<set->nSubSets;++i) {


464.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for(i=(0+1); i<set->nSubSets;++i) {


465.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for(i=(0-1); i<set->nSubSets;++i) {


466.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for(i=0; i<set->nSubSets;++i) {
	break;


467.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for(i=0; i<set->nSubSets;++i) {
	continue;


468.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for(i=0; i<set->nSubSets;++i) {*/


469.
\+ ==> -

mutant:
		for(j=i-1; j<set->nSubSets; ++j) {


470.
\+ ==> -

mutant:
		for(j=i+1; j<set->nSubSets; -+j) {


471.
\+ ==> -

mutant:
		for(j=i+1; j<set->nSubSets; +-j) {


472.
\+ ==> *

mutant:
		for(j=i*1; j<set->nSubSets; ++j) {


473.
\+ ==> *

mutant:
		for(j=i+1; j<set->nSubSets; *+j) {


474.
\+ ==> *

mutant:
		for(j=i+1; j<set->nSubSets; +*j) {


475.
\+ ==> /

mutant:
		for(j=i/1; j<set->nSubSets; ++j) {


476.
\+ ==> /

mutant:
		for(j=i+1; j<set->nSubSets; /+j) {


477.
\+ ==> /

mutant:
		for(j=i+1; j<set->nSubSets; +/j) {


478.
\+ ==> %

mutant:
		for(j=i%1; j<set->nSubSets; ++j) {


479.
\+ ==> %

mutant:
		for(j=i+1; j<set->nSubSets; %+j) {


480.
\+ ==> %

mutant:
		for(j=i+1; j<set->nSubSets; +%j) {


481.
< ==> >

mutant:
		for(j=i+1; j>set->nSubSets; ++j) {


482.
< ==> ==

mutant:
		for(j=i+1; j==set->nSubSets; ++j) {


483.
< ==> <=

mutant:
		for(j=i+1; j<=set->nSubSets; ++j) {


484.
< ==> >=

mutant:
		for(j=i+1; j>=set->nSubSets; ++j) {


485.
< ==> !=

mutant:
		for(j=i+1; j!=set->nSubSets; ++j) {


486.
\+\+ ==> --

mutant:
		for(j=i+1; j<set->nSubSets; --j) {


487.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		for(j=i+0; j<set->nSubSets; ++j) {


488.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		for(j=i+-1; j<set->nSubSets; ++j) {


489.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		for(j=i+(1+1); j<set->nSubSets; ++j) {


490.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		for(j=i+(1-1); j<set->nSubSets; ++j) {


491.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		for(j=i+1; j<set->nSubSets; ++j) {
		break;


492.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		for(j=i+1; j<set->nSubSets; ++j) {
		continue;


493.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*for(j=i+1; j<set->nSubSets; ++j) {*/


494.
< ==> >

mutant:
			if(set->nSubSetSizes[i] > set->nSubSetSizes[j]) {


495.
< ==> ==

mutant:
			if(set->nSubSetSizes[i] == set->nSubSetSizes[j]) {


496.
< ==> <=

mutant:
			if(set->nSubSetSizes[i] <= set->nSubSetSizes[j]) {


497.
< ==> >=

mutant:
			if(set->nSubSetSizes[i] >= set->nSubSetSizes[j]) {


498.
< ==> !=

mutant:
			if(set->nSubSetSizes[i] != set->nSubSetSizes[j]) {


499.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			if(set->nSubSetSizes[i] < set->nSubSetSizes[j]) {
			break;


500.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			if(set->nSubSetSizes[i] < set->nSubSetSizes[j]) {
			continue;


501.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*if(set->nSubSetSizes[i] < set->nSubSetSizes[j]) {*/


502.
if(\(.*\)) ==> if (!\1)

mutant:
			if (!(set->nSubSetSizes[i] < set->nSubSetSizes[j])) {


503.
if(\(.*\)) ==> if(0==1)

mutant:
			if(0==1) {


504.
if(\(.*\)) ==> if(1==1)

mutant:
			if(1==1) {


505.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				tempInt = set->nSubSetSizes[i];
				break;


506.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				tempInt = set->nSubSetSizes[i];
				continue;


507.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*tempInt = set->nSubSetSizes[i];*/


508.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				tempIntP = set->subsets[i];
				break;


509.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				tempIntP = set->subsets[i];
				continue;


510.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*tempIntP = set->subsets[i];*/


511.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				set->subsets[i] = set->subsets[j];
				break;


512.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				set->subsets[i] = set->subsets[j];
				continue;


513.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*set->subsets[i] = set->subsets[j];*/


514.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				set->subsets[j] = tempIntP;
				break;


515.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				set->subsets[j] = tempIntP;
				continue;


516.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*set->subsets[j] = tempIntP;*/


517.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				set->nSubSetSizes[i] = set->nSubSetSizes[j];
				break;


518.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				set->nSubSetSizes[i] = set->nSubSetSizes[j];
				continue;


519.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*set->nSubSetSizes[i] = set->nSubSetSizes[j];*/


520.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				set->nSubSetSizes[j] = tempInt;
				break;


521.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				set->nSubSetSizes[j] = tempInt;
				continue;


522.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*set->nSubSetSizes[j] = tempInt;*/


523.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				tempInt = set->originalOrder[i];
				break;


524.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				tempInt = set->originalOrder[i];
				continue;


525.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*tempInt = set->originalOrder[i];*/


526.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				set->originalOrder[i] = set->originalOrder[j];
				break;


527.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				set->originalOrder[i] = set->originalOrder[j];
				continue;


528.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*set->originalOrder[i] = set->originalOrder[j];*/


529.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				set->originalOrder[j] = tempInt;
				break;


530.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				set->originalOrder[j] = tempInt;
				continue;


531.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*set->originalOrder[j] = tempInt;*/


532.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			}
			break;


533.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			}
			continue;


534.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


535.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


536.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


537.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


538.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	//Get Memory for sizes table
	break;


539.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	//Get Memory for sizes table
	continue;


540.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*//Get Memory for sizes table*/


541.
\* ==> +

mutant:
	set->subSetsSizesSum = (int +*) malloc(sizeof(int *) * set->nSubSets);


542.
\* ==> +

mutant:
	set->subSetsSizesSum = (int *+) malloc(sizeof(int *) * set->nSubSets);


543.
\* ==> +

mutant:
	set->subSetsSizesSum = (int **) malloc(sizeof(int +) * set->nSubSets);


544.
\* ==> +

mutant:
	set->subSetsSizesSum = (int **) malloc(sizeof(int *) + set->nSubSets);


545.
\* ==> -

mutant:
	set->subSetsSizesSum = (int -*) malloc(sizeof(int *) * set->nSubSets);


546.
\* ==> -

mutant:
	set->subSetsSizesSum = (int *-) malloc(sizeof(int *) * set->nSubSets);


547.
\* ==> -

mutant:
	set->subSetsSizesSum = (int **) malloc(sizeof(int -) * set->nSubSets);


548.
\* ==> -

mutant:
	set->subSetsSizesSum = (int **) malloc(sizeof(int *) - set->nSubSets);


549.
\* ==> /

mutant:
	set->subSetsSizesSum = (int /*) malloc(sizeof(int *) * set->nSubSets);


550.
\* ==> /

mutant:
	set->subSetsSizesSum = (int */) malloc(sizeof(int *) * set->nSubSets);


551.
\* ==> /

mutant:
	set->subSetsSizesSum = (int **) malloc(sizeof(int /) * set->nSubSets);


552.
\* ==> /

mutant:
	set->subSetsSizesSum = (int **) malloc(sizeof(int *) / set->nSubSets);


553.
\* ==> %

mutant:
	set->subSetsSizesSum = (int %*) malloc(sizeof(int *) * set->nSubSets);


554.
\* ==> %

mutant:
	set->subSetsSizesSum = (int *%) malloc(sizeof(int *) * set->nSubSets);


555.
\* ==> %

mutant:
	set->subSetsSizesSum = (int **) malloc(sizeof(int %) * set->nSubSets);


556.
\* ==> %

mutant:
	set->subSetsSizesSum = (int **) malloc(sizeof(int *) % set->nSubSets);


557.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	set->subSetsSizesSum = (int **) malloc(sizeof(int *) * set->nSubSets);
	break;


558.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	set->subSetsSizesSum = (int **) malloc(sizeof(int *) * set->nSubSets);
	continue;


559.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*set->subSetsSizesSum = (int **) malloc(sizeof(int *) * set->nSubSets);*/


560.
\+ ==> -

mutant:
	for(i=0; i<set->nSubSets; i-+) {


561.
\+ ==> -

mutant:
	for(i=0; i<set->nSubSets; i+-) {


562.
\+ ==> *

mutant:
	for(i=0; i<set->nSubSets; i*+) {


563.
\+ ==> *

mutant:
	for(i=0; i<set->nSubSets; i+*) {


564.
\+ ==> /

mutant:
	for(i=0; i<set->nSubSets; i/+) {


565.
\+ ==> /

mutant:
	for(i=0; i<set->nSubSets; i+/) {


566.
\+ ==> %

mutant:
	for(i=0; i<set->nSubSets; i%+) {


567.
\+ ==> %

mutant:
	for(i=0; i<set->nSubSets; i+%) {


568.
< ==> >

mutant:
	for(i=0; i>set->nSubSets; i++) {


569.
< ==> ==

mutant:
	for(i=0; i==set->nSubSets; i++) {


570.
< ==> <=

mutant:
	for(i=0; i<=set->nSubSets; i++) {


571.
< ==> >=

mutant:
	for(i=0; i>=set->nSubSets; i++) {


572.
< ==> !=

mutant:
	for(i=0; i!=set->nSubSets; i++) {


573.
\+\+ ==> --

mutant:
	for(i=0; i<set->nSubSets; i--) {


574.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for(i=1; i<set->nSubSets; i++) {


575.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for(i=-1; i<set->nSubSets; i++) {


576.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for(i=(0+1); i<set->nSubSets; i++) {


577.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for(i=(0-1); i<set->nSubSets; i++) {


578.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for(i=0; i<set->nSubSets; i++) {
	break;


579.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for(i=0; i<set->nSubSets; i++) {
	continue;


580.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for(i=0; i<set->nSubSets; i++) {*/


581.
\* ==> +

mutant:
		set->subSetsSizesSum[i] = (int +) malloc(sizeof(int) * set->nSubSets);


582.
\* ==> +

mutant:
		set->subSetsSizesSum[i] = (int *) malloc(sizeof(int) + set->nSubSets);


583.
\* ==> -

mutant:
		set->subSetsSizesSum[i] = (int -) malloc(sizeof(int) * set->nSubSets);


584.
\* ==> -

mutant:
		set->subSetsSizesSum[i] = (int *) malloc(sizeof(int) - set->nSubSets);


585.
\* ==> /

mutant:
		set->subSetsSizesSum[i] = (int /) malloc(sizeof(int) * set->nSubSets);


586.
\* ==> /

mutant:
		set->subSetsSizesSum[i] = (int *) malloc(sizeof(int) / set->nSubSets);


587.
\* ==> %

mutant:
		set->subSetsSizesSum[i] = (int %) malloc(sizeof(int) * set->nSubSets);


588.
\* ==> %

mutant:
		set->subSetsSizesSum[i] = (int *) malloc(sizeof(int) % set->nSubSets);


589.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		set->subSetsSizesSum[i] = (int *) malloc(sizeof(int) * set->nSubSets);
		break;


590.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		set->subSetsSizesSum[i] = (int *) malloc(sizeof(int) * set->nSubSets);
		continue;


591.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*set->subSetsSizesSum[i] = (int *) malloc(sizeof(int) * set->nSubSets);*/


592.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		memset(set->subSetsSizesSum[i], 1, set->nSubSets);


593.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		memset(set->subSetsSizesSum[i], -1, set->nSubSets);


594.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		memset(set->subSetsSizesSum[i], (0+1), set->nSubSets);


595.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		memset(set->subSetsSizesSum[i], (0-1), set->nSubSets);


596.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		memset(set->subSetsSizesSum[i], 0, set->nSubSets);
		break;


597.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		memset(set->subSetsSizesSum[i], 0, set->nSubSets);
		continue;


598.
,([^,]+),([^,\)\]]+) ==> ,\2,\1

mutant:
		memset(set->subSetsSizesSum[i], set->nSubSets, 0);


599.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
		memset( 0,set->subSetsSizesSum[i], set->nSubSets);


600.
\[([^,]+),([^,\]]+) ==> [\2,\1

mutant:
		memset(set->subSetsSizesSum[ 0,i], set->nSubSets);


601.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*memset(set->subSetsSizesSum[i], 0, set->nSubSets);*/


602.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


603.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


604.
\+ ==> -

mutant:
	for(i=0; i<set->nSubSets; i-+) {


605.
\+ ==> -

mutant:
	for(i=0; i<set->nSubSets; i+-) {


606.
\+ ==> *

mutant:
	for(i=0; i<set->nSubSets; i*+) {


607.
\+ ==> *

mutant:
	for(i=0; i<set->nSubSets; i+*) {


608.
\+ ==> /

mutant:
	for(i=0; i<set->nSubSets; i/+) {


609.
\+ ==> /

mutant:
	for(i=0; i<set->nSubSets; i+/) {


610.
\+ ==> %

mutant:
	for(i=0; i<set->nSubSets; i%+) {


611.
\+ ==> %

mutant:
	for(i=0; i<set->nSubSets; i+%) {


612.
< ==> >

mutant:
	for(i=0; i>set->nSubSets; i++) {


613.
< ==> ==

mutant:
	for(i=0; i==set->nSubSets; i++) {


614.
< ==> <=

mutant:
	for(i=0; i<=set->nSubSets; i++) {


615.
< ==> >=

mutant:
	for(i=0; i>=set->nSubSets; i++) {


616.
< ==> !=

mutant:
	for(i=0; i!=set->nSubSets; i++) {


617.
\+\+ ==> --

mutant:
	for(i=0; i<set->nSubSets; i--) {


618.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for(i=1; i<set->nSubSets; i++) {


619.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for(i=-1; i<set->nSubSets; i++) {


620.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for(i=(0+1); i<set->nSubSets; i++) {


621.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for(i=(0-1); i<set->nSubSets; i++) {


622.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for(i=0; i<set->nSubSets; i++) {
	break;


623.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for(i=0; i<set->nSubSets; i++) {
	continue;


624.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for(i=0; i<set->nSubSets; i++) {*/


625.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		tempInt = 1;


626.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		tempInt = -1;


627.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		tempInt = (0+1);


628.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		tempInt = (0-1);


629.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		tempInt = 0;
		break;


630.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		tempInt = 0;
		continue;


631.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*tempInt = 0;*/


632.
\+ ==> -

mutant:
		for(j=i; j<set->nSubSets; j-+) {


633.
\+ ==> -

mutant:
		for(j=i; j<set->nSubSets; j+-) {


634.
\+ ==> *

mutant:
		for(j=i; j<set->nSubSets; j*+) {


635.
\+ ==> *

mutant:
		for(j=i; j<set->nSubSets; j+*) {


636.
\+ ==> /

mutant:
		for(j=i; j<set->nSubSets; j/+) {


637.
\+ ==> /

mutant:
		for(j=i; j<set->nSubSets; j+/) {


638.
\+ ==> %

mutant:
		for(j=i; j<set->nSubSets; j%+) {


639.
\+ ==> %

mutant:
		for(j=i; j<set->nSubSets; j+%) {


640.
< ==> >

mutant:
		for(j=i; j>set->nSubSets; j++) {


641.
< ==> ==

mutant:
		for(j=i; j==set->nSubSets; j++) {


642.
< ==> <=

mutant:
		for(j=i; j<=set->nSubSets; j++) {


643.
< ==> >=

mutant:
		for(j=i; j>=set->nSubSets; j++) {


644.
< ==> !=

mutant:
		for(j=i; j!=set->nSubSets; j++) {


645.
\+\+ ==> --

mutant:
		for(j=i; j<set->nSubSets; j--) {


646.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		for(j=i; j<set->nSubSets; j++) {
		break;


647.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		for(j=i; j<set->nSubSets; j++) {
		continue;


648.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*for(j=i; j<set->nSubSets; j++) {*/


649.
\+ ==> -

mutant:
			tempInt -= set->nSubSetSizes[j];


650.
\+ ==> *

mutant:
			tempInt *= set->nSubSetSizes[j];


651.
\+ ==> /

mutant:
			tempInt /= set->nSubSetSizes[j];


652.
\+ ==> %

mutant:
			tempInt %= set->nSubSetSizes[j];


653.
\+= ==> =+

mutant:
			tempInt =+ set->nSubSetSizes[j];


654.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			tempInt += set->nSubSetSizes[j];
			break;


655.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			tempInt += set->nSubSetSizes[j];
			continue;


656.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*tempInt += set->nSubSetSizes[j];*/


657.
-([^>]) ==> +\1

mutant:
			set->subSetsSizesSum[i][j+i] = tempInt;


658.
-([^>]) ==> *\1

mutant:
			set->subSetsSizesSum[i][j*i] = tempInt;


659.
-([^>]) ==> /\1

mutant:
			set->subSetsSizesSum[i][j/i] = tempInt;


660.
-([^>]) ==> %\1

mutant:
			set->subSetsSizesSum[i][j%i] = tempInt;


661.
-([^>]) ==> \1

mutant:
			set->subSetsSizesSum[i][ji] = tempInt;


662.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			set->subSetsSizesSum[i][j-i] = tempInt;
			break;


663.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			set->subSetsSizesSum[i][j-i] = tempInt;
			continue;


664.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*set->subSetsSizesSum[i][j-i] = tempInt;*/


665.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


666.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


667.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


668.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


669.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	//Check
	break;


670.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	//Check
	continue;


671.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*//Check*/


672.
\+ ==> -

mutant:
	/*for(i=0; i<set->nSubSets; i-+) {


673.
\+ ==> -

mutant:
	/*for(i=0; i<set->nSubSets; i+-) {


674.
\+ ==> *

mutant:
	/*for(i=0; i<set->nSubSets; i*+) {


675.
\+ ==> *

mutant:
	/*for(i=0; i<set->nSubSets; i+*) {


676.
\+ ==> /

mutant:
	/*for(i=0; i<set->nSubSets; i/+) {


677.
\+ ==> /

mutant:
	/*for(i=0; i<set->nSubSets; i+/) {


678.
\+ ==> %

mutant:
	/*for(i=0; i<set->nSubSets; i%+) {


679.
\+ ==> %

mutant:
	/*for(i=0; i<set->nSubSets; i+%) {


680.
\* ==> +

mutant:
	/+for(i=0; i<set->nSubSets; i++) {


681.
\* ==> -

mutant:
	/-for(i=0; i<set->nSubSets; i++) {


682.
\* ==> /

mutant:
	//for(i=0; i<set->nSubSets; i++) {


683.
\* ==> %

mutant:
	/%for(i=0; i<set->nSubSets; i++) {


684.
< ==> >

mutant:
	/*for(i=0; i>set->nSubSets; i++) {


685.
< ==> ==

mutant:
	/*for(i=0; i==set->nSubSets; i++) {


686.
< ==> <=

mutant:
	/*for(i=0; i<=set->nSubSets; i++) {


687.
< ==> >=

mutant:
	/*for(i=0; i>=set->nSubSets; i++) {


688.
< ==> !=

mutant:
	/*for(i=0; i!=set->nSubSets; i++) {


689.
\+\+ ==> --

mutant:
	/*for(i=0; i<set->nSubSets; i--) {


690.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	/*for(i=1; i<set->nSubSets; i++) {


691.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	/*for(i=-1; i<set->nSubSets; i++) {


692.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	/*for(i=(0+1); i<set->nSubSets; i++) {


693.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	/*for(i=(0-1); i<set->nSubSets; i++) {


694.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	/*for(i=0; i<set->nSubSets; i++) {
	break;


695.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	/*for(i=0; i<set->nSubSets; i++) {
	continue;


696.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*/*for(i=0; i<set->nSubSets; i++) {*/


697.
\+ ==> -

mutant:
		for(j=0; j<set->nSubSets; j-+) {


698.
\+ ==> -

mutant:
		for(j=0; j<set->nSubSets; j+-) {


699.
\+ ==> *

mutant:
		for(j=0; j<set->nSubSets; j*+) {


700.
\+ ==> *

mutant:
		for(j=0; j<set->nSubSets; j+*) {


701.
\+ ==> /

mutant:
		for(j=0; j<set->nSubSets; j/+) {


702.
\+ ==> /

mutant:
		for(j=0; j<set->nSubSets; j+/) {


703.
\+ ==> %

mutant:
		for(j=0; j<set->nSubSets; j%+) {


704.
\+ ==> %

mutant:
		for(j=0; j<set->nSubSets; j+%) {


705.
< ==> >

mutant:
		for(j=0; j>set->nSubSets; j++) {


706.
< ==> ==

mutant:
		for(j=0; j==set->nSubSets; j++) {


707.
< ==> <=

mutant:
		for(j=0; j<=set->nSubSets; j++) {


708.
< ==> >=

mutant:
		for(j=0; j>=set->nSubSets; j++) {


709.
< ==> !=

mutant:
		for(j=0; j!=set->nSubSets; j++) {


710.
\+\+ ==> --

mutant:
		for(j=0; j<set->nSubSets; j--) {


711.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		for(j=1; j<set->nSubSets; j++) {


712.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		for(j=-1; j<set->nSubSets; j++) {


713.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		for(j=(0+1); j<set->nSubSets; j++) {


714.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		for(j=(0-1); j<set->nSubSets; j++) {


715.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		for(j=0; j<set->nSubSets; j++) {
		break;


716.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		for(j=0; j<set->nSubSets; j++) {
		continue;


717.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*for(j=0; j<set->nSubSets; j++) {*/


718.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			printf("%u ", set->subSetsSizesSum[i][j]);
			break;


719.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			printf("%u ", set->subSetsSizesSum[i][j]);
			continue;


720.
".+" ==> ""

mutant:
			printf("", set->subSetsSizesSum[i][j]);


721.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			printf( set->subSetsSizesSum[i][j],"%u ");


722.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*printf("%u ", set->subSetsSizesSum[i][j]);*/


723.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


724.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


725.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		printf("\n");
		break;


726.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		printf("\n");
		continue;


727.
".+" ==> ""

mutant:
		printf("");


728.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*printf("\n");*/


729.
\* ==> +

mutant:
	}+/


730.
\* ==> -

mutant:
	}-/


731.
\* ==> /

mutant:
	}//


732.
\* ==> %

mutant:
	}%/


733.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}*/
	break;


734.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}*/
	continue;


735.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*}*/*/


736.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


737.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


738.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
void createSolutionStruct() {
break;


739.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
void createSolutionStruct() {
continue;


740.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*void createSolutionStruct() {*/


741.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int i;
	break;


742.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int i;
	continue;


743.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int i;*/


744.
\* ==> +

mutant:
	solution = (Solution +)malloc(sizeof(Solution));


745.
\* ==> -

mutant:
	solution = (Solution -)malloc(sizeof(Solution));


746.
\* ==> /

mutant:
	solution = (Solution /)malloc(sizeof(Solution));


747.
\* ==> %

mutant:
	solution = (Solution %)malloc(sizeof(Solution));


748.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	solution = (Solution *)malloc(sizeof(Solution));
	break;


749.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	solution = (Solution *)malloc(sizeof(Solution));
	continue;


750.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*solution = (Solution *)malloc(sizeof(Solution));*/


751.
\* ==> +

mutant:
	solution->subSets = (int +)malloc(sizeof(int) * (set->nSubSets));


752.
\* ==> +

mutant:
	solution->subSets = (int *)malloc(sizeof(int) + (set->nSubSets));


753.
\* ==> -

mutant:
	solution->subSets = (int -)malloc(sizeof(int) * (set->nSubSets));


754.
\* ==> -

mutant:
	solution->subSets = (int *)malloc(sizeof(int) - (set->nSubSets));


755.
\* ==> /

mutant:
	solution->subSets = (int /)malloc(sizeof(int) * (set->nSubSets));


756.
\* ==> /

mutant:
	solution->subSets = (int *)malloc(sizeof(int) / (set->nSubSets));


757.
\* ==> %

mutant:
	solution->subSets = (int %)malloc(sizeof(int) * (set->nSubSets));


758.
\* ==> %

mutant:
	solution->subSets = (int *)malloc(sizeof(int) % (set->nSubSets));


759.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	solution->subSets = (int *)malloc(sizeof(int) * (set->nSubSets));
	break;


760.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	solution->subSets = (int *)malloc(sizeof(int) * (set->nSubSets));
	continue;


761.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*solution->subSets = (int *)malloc(sizeof(int) * (set->nSubSets));*/


762.
\+ ==> -

mutant:
	for(i=0; i<(set->nSubSets); i-+)


763.
\+ ==> -

mutant:
	for(i=0; i<(set->nSubSets); i+-)


764.
\+ ==> *

mutant:
	for(i=0; i<(set->nSubSets); i*+)


765.
\+ ==> *

mutant:
	for(i=0; i<(set->nSubSets); i+*)


766.
\+ ==> /

mutant:
	for(i=0; i<(set->nSubSets); i/+)


767.
\+ ==> /

mutant:
	for(i=0; i<(set->nSubSets); i+/)


768.
\+ ==> %

mutant:
	for(i=0; i<(set->nSubSets); i%+)


769.
\+ ==> %

mutant:
	for(i=0; i<(set->nSubSets); i+%)


770.
< ==> >

mutant:
	for(i=0; i>(set->nSubSets); i++)


771.
< ==> ==

mutant:
	for(i=0; i==(set->nSubSets); i++)


772.
< ==> <=

mutant:
	for(i=0; i<=(set->nSubSets); i++)


773.
< ==> >=

mutant:
	for(i=0; i>=(set->nSubSets); i++)


774.
< ==> !=

mutant:
	for(i=0; i!=(set->nSubSets); i++)


775.
\+\+ ==> --

mutant:
	for(i=0; i<(set->nSubSets); i--)


776.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for(i=1; i<(set->nSubSets); i++)


777.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for(i=-1; i<(set->nSubSets); i++)


778.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for(i=(0+1); i<(set->nSubSets); i++)


779.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for(i=(0-1); i<(set->nSubSets); i++)


780.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for(i=0; i<(set->nSubSets); i++)
	break;


781.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for(i=0; i<(set->nSubSets); i++)
	continue;


782.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for(i=0; i<(set->nSubSets); i++)*/


783.
-([^>]) ==> +\1

mutant:
		solution->subSets[i] = +1;


784.
-([^>]) ==> *\1

mutant:
		solution->subSets[i] = *1;


785.
-([^>]) ==> /\1

mutant:
		solution->subSets[i] = /1;


786.
-([^>]) ==> %\1

mutant:
		solution->subSets[i] = %1;


787.
-([^>]) ==> \1

mutant:
		solution->subSets[i] = 1;


788.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		solution->subSets[i] = -0;


789.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		solution->subSets[i] = --1;


790.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		solution->subSets[i] = -(1+1);


791.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		solution->subSets[i] = -(1-1);


792.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		solution->subSets[i] = -1;
		break;


793.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		solution->subSets[i] = -1;
		continue;


794.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*solution->subSets[i] = -1;*/


795.
\* ==> +

mutant:
	solution->boolIncluded = (int +)malloc(sizeof(int) * set->nGlobalSetSize);


796.
\* ==> +

mutant:
	solution->boolIncluded = (int *)malloc(sizeof(int) + set->nGlobalSetSize);


797.
\* ==> -

mutant:
	solution->boolIncluded = (int -)malloc(sizeof(int) * set->nGlobalSetSize);


798.
\* ==> -

mutant:
	solution->boolIncluded = (int *)malloc(sizeof(int) - set->nGlobalSetSize);


799.
\* ==> /

mutant:
	solution->boolIncluded = (int /)malloc(sizeof(int) * set->nGlobalSetSize);


800.
\* ==> /

mutant:
	solution->boolIncluded = (int *)malloc(sizeof(int) / set->nGlobalSetSize);


801.
\* ==> %

mutant:
	solution->boolIncluded = (int %)malloc(sizeof(int) * set->nGlobalSetSize);


802.
\* ==> %

mutant:
	solution->boolIncluded = (int *)malloc(sizeof(int) % set->nGlobalSetSize);


803.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	solution->boolIncluded = (int *)malloc(sizeof(int) * set->nGlobalSetSize);
	break;


804.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	solution->boolIncluded = (int *)malloc(sizeof(int) * set->nGlobalSetSize);
	continue;


805.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*solution->boolIncluded = (int *)malloc(sizeof(int) * set->nGlobalSetSize);*/


806.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	memset(solution->boolIncluded, 1, set->nGlobalSetSize);


807.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	memset(solution->boolIncluded, -1, set->nGlobalSetSize);


808.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	memset(solution->boolIncluded, (0+1), set->nGlobalSetSize);


809.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	memset(solution->boolIncluded, (0-1), set->nGlobalSetSize);


810.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	memset(solution->boolIncluded, 0, set->nGlobalSetSize);
	break;


811.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	memset(solution->boolIncluded, 0, set->nGlobalSetSize);
	continue;


812.
,([^,]+),([^,\)\]]+) ==> ,\2,\1

mutant:
	memset(solution->boolIncluded, set->nGlobalSetSize, 0);


813.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
	memset( 0,solution->boolIncluded, set->nGlobalSetSize);


814.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*memset(solution->boolIncluded, 0, set->nGlobalSetSize);*/


815.
\* ==> +

mutant:
	bestSolution = (Solution +)malloc(sizeof(Solution));


816.
\* ==> -

mutant:
	bestSolution = (Solution -)malloc(sizeof(Solution));


817.
\* ==> /

mutant:
	bestSolution = (Solution /)malloc(sizeof(Solution));


818.
\* ==> %

mutant:
	bestSolution = (Solution %)malloc(sizeof(Solution));


819.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	bestSolution = (Solution *)malloc(sizeof(Solution));
	break;


820.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	bestSolution = (Solution *)malloc(sizeof(Solution));
	continue;


821.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*bestSolution = (Solution *)malloc(sizeof(Solution));*/


822.
\* ==> +

mutant:
	bestSolution->subSets = (int +)malloc(sizeof(int) * (set->nSubSets));


823.
\* ==> +

mutant:
	bestSolution->subSets = (int *)malloc(sizeof(int) + (set->nSubSets));


824.
\* ==> -

mutant:
	bestSolution->subSets = (int -)malloc(sizeof(int) * (set->nSubSets));


825.
\* ==> -

mutant:
	bestSolution->subSets = (int *)malloc(sizeof(int) - (set->nSubSets));


826.
\* ==> /

mutant:
	bestSolution->subSets = (int /)malloc(sizeof(int) * (set->nSubSets));


827.
\* ==> /

mutant:
	bestSolution->subSets = (int *)malloc(sizeof(int) / (set->nSubSets));


828.
\* ==> %

mutant:
	bestSolution->subSets = (int %)malloc(sizeof(int) * (set->nSubSets));


829.
\* ==> %

mutant:
	bestSolution->subSets = (int *)malloc(sizeof(int) % (set->nSubSets));


830.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	bestSolution->subSets = (int *)malloc(sizeof(int) * (set->nSubSets));
	break;


831.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	bestSolution->subSets = (int *)malloc(sizeof(int) * (set->nSubSets));
	continue;


832.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*bestSolution->subSets = (int *)malloc(sizeof(int) * (set->nSubSets));*/


833.
\+ ==> -

mutant:
	for (i = 0; i < (set->nSubSets); i-+)


834.
\+ ==> -

mutant:
	for (i = 0; i < (set->nSubSets); i+-)


835.
\+ ==> *

mutant:
	for (i = 0; i < (set->nSubSets); i*+)


836.
\+ ==> *

mutant:
	for (i = 0; i < (set->nSubSets); i+*)


837.
\+ ==> /

mutant:
	for (i = 0; i < (set->nSubSets); i/+)


838.
\+ ==> /

mutant:
	for (i = 0; i < (set->nSubSets); i+/)


839.
\+ ==> %

mutant:
	for (i = 0; i < (set->nSubSets); i%+)


840.
\+ ==> %

mutant:
	for (i = 0; i < (set->nSubSets); i+%)


841.
< ==> >

mutant:
	for (i = 0; i > (set->nSubSets); i++)


842.
< ==> ==

mutant:
	for (i = 0; i == (set->nSubSets); i++)


843.
< ==> <=

mutant:
	for (i = 0; i <= (set->nSubSets); i++)


844.
< ==> >=

mutant:
	for (i = 0; i >= (set->nSubSets); i++)


845.
< ==> !=

mutant:
	for (i = 0; i != (set->nSubSets); i++)


846.
\+\+ ==> --

mutant:
	for (i = 0; i < (set->nSubSets); i--)


847.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for (i = 1; i < (set->nSubSets); i++)


848.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for (i = -1; i < (set->nSubSets); i++)


849.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for (i = (0+1); i < (set->nSubSets); i++)


850.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for (i = (0-1); i < (set->nSubSets); i++)


851.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for (i = 0; i < (set->nSubSets); i++)
	break;


852.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for (i = 0; i < (set->nSubSets); i++)
	continue;


853.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for (i = 0; i < (set->nSubSets); i++)*/


854.
-([^>]) ==> +\1

mutant:
		bestSolution->subSets[i] = +1;


855.
-([^>]) ==> *\1

mutant:
		bestSolution->subSets[i] = *1;


856.
-([^>]) ==> /\1

mutant:
		bestSolution->subSets[i] = /1;


857.
-([^>]) ==> %\1

mutant:
		bestSolution->subSets[i] = %1;


858.
-([^>]) ==> \1

mutant:
		bestSolution->subSets[i] = 1;


859.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		bestSolution->subSets[i] = -0;


860.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		bestSolution->subSets[i] = --1;


861.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		bestSolution->subSets[i] = -(1+1);


862.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		bestSolution->subSets[i] = -(1-1);


863.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		bestSolution->subSets[i] = -1;
		break;


864.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		bestSolution->subSets[i] = -1;
		continue;


865.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*bestSolution->subSets[i] = -1;*/


866.
\* ==> +

mutant:
	bestSolution->boolIncluded = (int +)malloc(sizeof(int) * set->nGlobalSetSize);


867.
\* ==> +

mutant:
	bestSolution->boolIncluded = (int *)malloc(sizeof(int) + set->nGlobalSetSize);


868.
\* ==> -

mutant:
	bestSolution->boolIncluded = (int -)malloc(sizeof(int) * set->nGlobalSetSize);


869.
\* ==> -

mutant:
	bestSolution->boolIncluded = (int *)malloc(sizeof(int) - set->nGlobalSetSize);


870.
\* ==> /

mutant:
	bestSolution->boolIncluded = (int /)malloc(sizeof(int) * set->nGlobalSetSize);


871.
\* ==> /

mutant:
	bestSolution->boolIncluded = (int *)malloc(sizeof(int) / set->nGlobalSetSize);


872.
\* ==> %

mutant:
	bestSolution->boolIncluded = (int %)malloc(sizeof(int) * set->nGlobalSetSize);


873.
\* ==> %

mutant:
	bestSolution->boolIncluded = (int *)malloc(sizeof(int) % set->nGlobalSetSize);


874.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	bestSolution->boolIncluded = (int *)malloc(sizeof(int) * set->nGlobalSetSize);
	break;


875.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	bestSolution->boolIncluded = (int *)malloc(sizeof(int) * set->nGlobalSetSize);
	continue;


876.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*bestSolution->boolIncluded = (int *)malloc(sizeof(int) * set->nGlobalSetSize);*/


877.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	memset(bestSolution->boolIncluded, 1, set->nGlobalSetSize);


878.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	memset(bestSolution->boolIncluded, -1, set->nGlobalSetSize);


879.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	memset(bestSolution->boolIncluded, (0+1), set->nGlobalSetSize);


880.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	memset(bestSolution->boolIncluded, (0-1), set->nGlobalSetSize);


881.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	memset(bestSolution->boolIncluded, 0, set->nGlobalSetSize);
	break;


882.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	memset(bestSolution->boolIncluded, 0, set->nGlobalSetSize);
	continue;


883.
,([^,]+),([^,\)\]]+) ==> ,\2,\1

mutant:
	memset(bestSolution->boolIncluded, set->nGlobalSetSize, 0);


884.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
	memset( 0,bestSolution->boolIncluded, set->nGlobalSetSize);


885.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*memset(bestSolution->boolIncluded, 0, set->nGlobalSetSize);*/


886.
-([^>]) ==> +\1

mutant:
	bestSolution->nSolutionSize = set->nSubSets+1;


887.
-([^>]) ==> *\1

mutant:
	bestSolution->nSolutionSize = set->nSubSets*1;


888.
-([^>]) ==> /\1

mutant:
	bestSolution->nSolutionSize = set->nSubSets/1;


889.
-([^>]) ==> %\1

mutant:
	bestSolution->nSolutionSize = set->nSubSets%1;


890.
-([^>]) ==> \1

mutant:
	bestSolution->nSolutionSize = set->nSubSets1;


891.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
	bestSolution->nSolutionSize = set->nSubSets-0;


892.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	bestSolution->nSolutionSize = set->nSubSets--1;


893.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	bestSolution->nSolutionSize = set->nSubSets-(1+1);


894.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	bestSolution->nSolutionSize = set->nSubSets-(1-1);


895.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	bestSolution->nSolutionSize = set->nSubSets-1;
	break;


896.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	bestSolution->nSolutionSize = set->nSubSets-1;
	continue;


897.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*bestSolution->nSolutionSize = set->nSubSets-1;*/


898.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


899.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


900.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
void copySolutionToBest() {
break;


901.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
void copySolutionToBest() {
continue;


902.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*void copySolutionToBest() {*/


903.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int i;
	break;


904.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int i;
	continue;


905.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int i;*/


906.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	bestSolution->nSolutionSize = solution->nSolutionSize;
	break;


907.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	bestSolution->nSolutionSize = solution->nSolutionSize;
	continue;


908.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*bestSolution->nSolutionSize = solution->nSolutionSize;*/


909.
\+ ==> -

mutant:
	for(i=0;i<solution->nSolutionSize;i-+)


910.
\+ ==> -

mutant:
	for(i=0;i<solution->nSolutionSize;i+-)


911.
\+ ==> *

mutant:
	for(i=0;i<solution->nSolutionSize;i*+)


912.
\+ ==> *

mutant:
	for(i=0;i<solution->nSolutionSize;i+*)


913.
\+ ==> /

mutant:
	for(i=0;i<solution->nSolutionSize;i/+)


914.
\+ ==> /

mutant:
	for(i=0;i<solution->nSolutionSize;i+/)


915.
\+ ==> %

mutant:
	for(i=0;i<solution->nSolutionSize;i%+)


916.
\+ ==> %

mutant:
	for(i=0;i<solution->nSolutionSize;i+%)


917.
< ==> >

mutant:
	for(i=0;i>solution->nSolutionSize;i++)


918.
< ==> ==

mutant:
	for(i=0;i==solution->nSolutionSize;i++)


919.
< ==> <=

mutant:
	for(i=0;i<=solution->nSolutionSize;i++)


920.
< ==> >=

mutant:
	for(i=0;i>=solution->nSolutionSize;i++)


921.
< ==> !=

mutant:
	for(i=0;i!=solution->nSolutionSize;i++)


922.
\+\+ ==> --

mutant:
	for(i=0;i<solution->nSolutionSize;i--)


923.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for(i=1;i<solution->nSolutionSize;i++)


924.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for(i=-1;i<solution->nSolutionSize;i++)


925.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for(i=(0+1);i<solution->nSolutionSize;i++)


926.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for(i=(0-1);i<solution->nSolutionSize;i++)


927.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for(i=0;i<solution->nSolutionSize;i++)
	break;


928.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for(i=0;i<solution->nSolutionSize;i++)
	continue;


929.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for(i=0;i<solution->nSolutionSize;i++)*/


930.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		bestSolution->subSets[i] = solution->subSets[i];
		break;


931.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		bestSolution->subSets[i] = solution->subSets[i];
		continue;


932.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*bestSolution->subSets[i] = solution->subSets[i];*/


933.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


934.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


935.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
int depth = 1;


936.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
int depth = -1;


937.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
int depth = (0+1);


938.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
int depth = (0-1);


939.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
int depth = 0;
break;


940.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
int depth = 0;
continue;


941.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*int depth = 0;*/


942.
\* ==> +

mutant:
void backTrack4(Solution+ solution, int last, int sum) {


943.
\* ==> -

mutant:
void backTrack4(Solution- solution, int last, int sum) {


944.
\* ==> /

mutant:
void backTrack4(Solution/ solution, int last, int sum) {


945.
\* ==> %

mutant:
void backTrack4(Solution% solution, int last, int sum) {


946.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
void backTrack0(Solution* solution, int last, int sum) {


947.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
void backTrack1(Solution* solution, int last, int sum) {


948.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
void backTrack-1(Solution* solution, int last, int sum) {


949.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
void backTrack(4+1)(Solution* solution, int last, int sum) {


950.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
void backTrack(4-1)(Solution* solution, int last, int sum) {


951.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
void backTrack4(Solution* solution, int last, int sum) {
break;


952.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
void backTrack4(Solution* solution, int last, int sum) {
continue;


953.
,([^,]+),([^,\)\]]+) ==> ,\2,\1

mutant:
void backTrack4(Solution* solution, int sum, int last) {


954.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
void backTrack4( int last,Solution* solution, int sum) {


955.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*void backTrack4(Solution* solution, int last, int sum) {*/


956.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int i;
	break;


957.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int i;
	continue;


958.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int i;*/


959.
>= ==> ==

mutant:
	if(solution->nSolutionSize == bestSolution->nSolutionSize)


960.
>= ==> !=

mutant:
	if(solution->nSolutionSize != bestSolution->nSolutionSize)


961.
>= ==> <

mutant:
	if(solution->nSolutionSize < bestSolution->nSolutionSize)


962.
>= ==> >

mutant:
	if(solution->nSolutionSize > bestSolution->nSolutionSize)


963.
([^-])> ==> \1<

mutant:
	if(solution->nSolutionSize <= bestSolution->nSolutionSize)


964.
([^-])> ==> \1==

mutant:
	if(solution->nSolutionSize === bestSolution->nSolutionSize)


965.
([^-])> ==> \1>=

mutant:
	if(solution->nSolutionSize >== bestSolution->nSolutionSize)


966.
([^-])> ==> \1<=

mutant:
	if(solution->nSolutionSize <== bestSolution->nSolutionSize)


967.
([^-])> ==> \1!=

mutant:
	if(solution->nSolutionSize !== bestSolution->nSolutionSize)


968.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	if(solution->nSolutionSize >= bestSolution->nSolutionSize)
	break;


969.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	if(solution->nSolutionSize >= bestSolution->nSolutionSize)
	continue;


970.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*if(solution->nSolutionSize >= bestSolution->nSolutionSize)*/


971.
if(\(.*\)) ==> if (!\1)

mutant:
	if (!(solution->nSolutionSize >= bestSolution->nSolutionSize))


972.
if(\(.*\)) ==> if(0==1)

mutant:
	if(0==1)


973.
if(\(.*\)) ==> if(1==1)

mutant:
	if(1==1)


974.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		return;
		break;


975.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		return;
		continue;


976.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*return;*/


977.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	if(checkSolution(solution)) {
	break;


978.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	if(checkSolution(solution)) {
	continue;


979.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*if(checkSolution(solution)) {*/


980.
if(\(.*\)) ==> if (!\1)

mutant:
	if (!(checkSolution(solution))) {


981.
if(\(.*\)) ==> if(0==1)

mutant:
	if(0==1) {


982.
if(\(.*\)) ==> if(1==1)

mutant:
	if(1==1) {


983.
< ==> >

mutant:
		if(solution->nSolutionSize > bestSolution->nSolutionSize) {


984.
< ==> ==

mutant:
		if(solution->nSolutionSize == bestSolution->nSolutionSize) {


985.
< ==> <=

mutant:
		if(solution->nSolutionSize <= bestSolution->nSolutionSize) {


986.
< ==> >=

mutant:
		if(solution->nSolutionSize >= bestSolution->nSolutionSize) {


987.
< ==> !=

mutant:
		if(solution->nSolutionSize != bestSolution->nSolutionSize) {


988.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		if(solution->nSolutionSize < bestSolution->nSolutionSize) {
		break;


989.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		if(solution->nSolutionSize < bestSolution->nSolutionSize) {
		continue;


990.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*if(solution->nSolutionSize < bestSolution->nSolutionSize) {*/


991.
if(\(.*\)) ==> if (!\1)

mutant:
		if (!(solution->nSolutionSize < bestSolution->nSolutionSize)) {


992.
if(\(.*\)) ==> if(0==1)

mutant:
		if(0==1) {


993.
if(\(.*\)) ==> if(1==1)

mutant:
		if(1==1) {


994.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			copySolutionToBest();
			break;


995.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			copySolutionToBest();
			continue;


996.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*copySolutionToBest();*/


997.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			// printf("New Solution Size : %u\n",bestSolution->nSolutionSize);
			break;


998.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			// printf("New Solution Size : %u\n",bestSolution->nSolutionSize);
			continue;


999.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*// printf("New Solution Size : %u\n",bestSolution->nSolutionSize);*/


1000.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


1001.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


1002.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		return;
		break;


1003.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		return;
		continue;


1004.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*return;*/


1005.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


1006.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


1007.
\+ ==> -

mutant:
	for(i=last; i<set->nSubSets; i-+) {


1008.
\+ ==> -

mutant:
	for(i=last; i<set->nSubSets; i+-) {


1009.
\+ ==> *

mutant:
	for(i=last; i<set->nSubSets; i*+) {


1010.
\+ ==> *

mutant:
	for(i=last; i<set->nSubSets; i+*) {


1011.
\+ ==> /

mutant:
	for(i=last; i<set->nSubSets; i/+) {


1012.
\+ ==> /

mutant:
	for(i=last; i<set->nSubSets; i+/) {


1013.
\+ ==> %

mutant:
	for(i=last; i<set->nSubSets; i%+) {


1014.
\+ ==> %

mutant:
	for(i=last; i<set->nSubSets; i+%) {


1015.
< ==> >

mutant:
	for(i=last; i>set->nSubSets; i++) {


1016.
< ==> ==

mutant:
	for(i=last; i==set->nSubSets; i++) {


1017.
< ==> <=

mutant:
	for(i=last; i<=set->nSubSets; i++) {


1018.
< ==> >=

mutant:
	for(i=last; i>=set->nSubSets; i++) {


1019.
< ==> !=

mutant:
	for(i=last; i!=set->nSubSets; i++) {


1020.
\+\+ ==> --

mutant:
	for(i=last; i<set->nSubSets; i--) {


1021.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for(i=last; i<set->nSubSets; i++) {
	break;


1022.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for(i=last; i<set->nSubSets; i++) {
	continue;


1023.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for(i=last; i<set->nSubSets; i++) {*/


1024.
\+ ==> -

mutant:
		if(sum-set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] < set->nGlobalSetSize)


1025.
\+ ==> *

mutant:
		if(sum*set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] < set->nGlobalSetSize)


1026.
\+ ==> /

mutant:
		if(sum/set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] < set->nGlobalSetSize)


1027.
\+ ==> %

mutant:
		if(sum%set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] < set->nGlobalSetSize)


1028.
-([^>]) ==> +\1

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize+1)-solution->nSolutionSize] < set->nGlobalSetSize)


1029.
-([^>]) ==> +\1

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)+solution->nSolutionSize] < set->nGlobalSetSize)


1030.
-([^>]) ==> *\1

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize*1)-solution->nSolutionSize] < set->nGlobalSetSize)


1031.
-([^>]) ==> *\1

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)*solution->nSolutionSize] < set->nGlobalSetSize)


1032.
-([^>]) ==> /\1

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize/1)-solution->nSolutionSize] < set->nGlobalSetSize)


1033.
-([^>]) ==> /\1

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)/solution->nSolutionSize] < set->nGlobalSetSize)


1034.
-([^>]) ==> %\1

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize%1)-solution->nSolutionSize] < set->nGlobalSetSize)


1035.
-([^>]) ==> %\1

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)%solution->nSolutionSize] < set->nGlobalSetSize)


1036.
< ==> >

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] > set->nGlobalSetSize)


1037.
< ==> ==

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] == set->nGlobalSetSize)


1038.
< ==> <=

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] <= set->nGlobalSetSize)


1039.
< ==> >=

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] >= set->nGlobalSetSize)


1040.
< ==> !=

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] != set->nGlobalSetSize)


1041.
-([^>]) ==> \1

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize1)-solution->nSolutionSize] < set->nGlobalSetSize)


1042.
-([^>]) ==> \1

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)solution->nSolutionSize] < set->nGlobalSetSize)


1043.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-0)-solution->nSolutionSize] < set->nGlobalSetSize)


1044.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize--1)-solution->nSolutionSize] < set->nGlobalSetSize)


1045.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-(1+1))-solution->nSolutionSize] < set->nGlobalSetSize)


1046.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-(1-1))-solution->nSolutionSize] < set->nGlobalSetSize)


1047.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] < set->nGlobalSetSize)
		break;


1048.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] < set->nGlobalSetSize)
		continue;


1049.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*if(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] < set->nGlobalSetSize)*/


1050.
if(\(.*\)) ==> if (!\1)

mutant:
		if (!(sum+set->subSetsSizesSum[i][(bestSolution->nSolutionSize-1)-solution->nSolutionSize] < set->nGlobalSetSize))


1051.
if(\(.*\)) ==> if(0==1)

mutant:
		if(0==1)


1052.
if(\(.*\)) ==> if(1==1)

mutant:
		if(1==1)


1053.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			return;
			break;


1054.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			return;
			continue;


1055.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*return;*/


1056.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		//add subset to solution
		break;


1057.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		//add subset to solution
		continue;


1058.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*//add subset to solution*/


1059.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		addSubSet(solution, i);
		break;


1060.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		addSubSet(solution, i);
		continue;


1061.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
		addSubSet( i,solution);


1062.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*addSubSet(solution, i);*/


1063.
\+ ==> -

mutant:
		sum-=set->nSubSetSizes[i];


1064.
\+ ==> *

mutant:
		sum*=set->nSubSetSizes[i];


1065.
\+ ==> /

mutant:
		sum/=set->nSubSetSizes[i];


1066.
\+ ==> %

mutant:
		sum%=set->nSubSetSizes[i];


1067.
\+= ==> =+

mutant:
		sum=+set->nSubSetSizes[i];


1068.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		sum+=set->nSubSetSizes[i];
		break;


1069.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		sum+=set->nSubSetSizes[i];
		continue;


1070.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*sum+=set->nSubSetSizes[i];*/


1071.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		//recure
		break;


1072.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		//recure
		continue;


1073.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*//recure*/


1074.
\+ ==> -

mutant:
		backTrack4(solution, i - 1, sum);


1075.
\+ ==> *

mutant:
		backTrack4(solution, i * 1, sum);


1076.
\+ ==> /

mutant:
		backTrack4(solution, i / 1, sum);


1077.
\+ ==> %

mutant:
		backTrack4(solution, i % 1, sum);


1078.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		backTrack0(solution, i + 1, sum);


1079.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		backTrack4(solution, i + 0, sum);


1080.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		backTrack1(solution, i + 1, sum);


1081.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		backTrack-1(solution, i + 1, sum);


1082.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		backTrack4(solution, i + -1, sum);


1083.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		backTrack(4+1)(solution, i + 1, sum);


1084.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		backTrack4(solution, i + (1+1), sum);


1085.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		backTrack(4-1)(solution, i + 1, sum);


1086.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		backTrack4(solution, i + (1-1), sum);


1087.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		backTrack4(solution, i + 1, sum);
		break;


1088.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		backTrack4(solution, i + 1, sum);
		continue;


1089.
,([^,]+),([^,\)\]]+) ==> ,\2,\1

mutant:
		backTrack4(solution, sum, i + 1);


1090.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
		backTrack4( i + 1,solution, sum);


1091.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*backTrack4(solution, i + 1, sum);*/


1092.
-([^>]) ==> +\1

mutant:
		sum+=set->nSubSetSizes[i];


1093.
-([^>]) ==> *\1

mutant:
		sum*=set->nSubSetSizes[i];


1094.
-([^>]) ==> /\1

mutant:
		sum/=set->nSubSetSizes[i];


1095.
-([^>]) ==> %\1

mutant:
		sum%=set->nSubSetSizes[i];


1096.
-= ==> =-

mutant:
		sum=-set->nSubSetSizes[i];


1097.
-([^>]) ==> \1

mutant:
		sum=set->nSubSetSizes[i];


1098.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		sum-=set->nSubSetSizes[i];
		break;


1099.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		sum-=set->nSubSetSizes[i];
		continue;


1100.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*sum-=set->nSubSetSizes[i];*/


1101.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		//remove solution
		break;


1102.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		//remove solution
		continue;


1103.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*//remove solution*/


1104.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		removeSubSet(solution, i);
		break;


1105.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		removeSubSet(solution, i);
		continue;


1106.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
		removeSubSet( i,solution);


1107.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*removeSubSet(solution, i);*/


1108.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


1109.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


1110.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


1111.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


1112.
\* ==> +

mutant:
void addSubSet(Solution+ solution, int subSetIndex) {


1113.
\* ==> -

mutant:
void addSubSet(Solution- solution, int subSetIndex) {


1114.
\* ==> /

mutant:
void addSubSet(Solution/ solution, int subSetIndex) {


1115.
\* ==> %

mutant:
void addSubSet(Solution% solution, int subSetIndex) {


1116.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
void addSubSet(Solution* solution, int subSetIndex) {
break;


1117.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
void addSubSet(Solution* solution, int subSetIndex) {
continue;


1118.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
void addSubSet( int subSetIndex,Solution* solution) {


1119.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*void addSubSet(Solution* solution, int subSetIndex) {*/


1120.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int i;
	break;


1121.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int i;
	continue;


1122.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int i;*/


1123.
\+ ==> -

mutant:
	solution->nSolutionSize-+;


1124.
\+ ==> -

mutant:
	solution->nSolutionSize+-;


1125.
\+ ==> *

mutant:
	solution->nSolutionSize*+;


1126.
\+ ==> *

mutant:
	solution->nSolutionSize+*;


1127.
\+ ==> /

mutant:
	solution->nSolutionSize/+;


1128.
\+ ==> /

mutant:
	solution->nSolutionSize+/;


1129.
\+ ==> %

mutant:
	solution->nSolutionSize%+;


1130.
\+ ==> %

mutant:
	solution->nSolutionSize+%;


1131.
\+\+ ==> --

mutant:
	solution->nSolutionSize--;


1132.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	solution->nSolutionSize++;
	break;


1133.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	solution->nSolutionSize++;
	continue;


1134.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*solution->nSolutionSize++;*/


1135.
-([^>]) ==> +\1

mutant:
	solution->subSets[solution->nSolutionSize+1] = subSetIndex;


1136.
-([^>]) ==> *\1

mutant:
	solution->subSets[solution->nSolutionSize*1] = subSetIndex;


1137.
-([^>]) ==> /\1

mutant:
	solution->subSets[solution->nSolutionSize/1] = subSetIndex;


1138.
-([^>]) ==> %\1

mutant:
	solution->subSets[solution->nSolutionSize%1] = subSetIndex;


1139.
-([^>]) ==> \1

mutant:
	solution->subSets[solution->nSolutionSize1] = subSetIndex;


1140.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
	solution->subSets[solution->nSolutionSize-0] = subSetIndex;


1141.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	solution->subSets[solution->nSolutionSize--1] = subSetIndex;


1142.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	solution->subSets[solution->nSolutionSize-(1+1)] = subSetIndex;


1143.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	solution->subSets[solution->nSolutionSize-(1-1)] = subSetIndex;


1144.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	solution->subSets[solution->nSolutionSize-1] = subSetIndex;
	break;


1145.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	solution->subSets[solution->nSolutionSize-1] = subSetIndex;
	continue;


1146.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*solution->subSets[solution->nSolutionSize-1] = subSetIndex;*/


1147.
\+ ==> -

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i-+) {


1148.
\+ ==> -

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i+-) {


1149.
\+ ==> *

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i*+) {


1150.
\+ ==> *

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i+*) {


1151.
\+ ==> /

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i/+) {


1152.
\+ ==> /

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i+/) {


1153.
\+ ==> %

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i%+) {


1154.
\+ ==> %

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i+%) {


1155.
< ==> >

mutant:
	for(i=0; i>set->nSubSetSizes[subSetIndex]; i++) {


1156.
< ==> ==

mutant:
	for(i=0; i==set->nSubSetSizes[subSetIndex]; i++) {


1157.
< ==> <=

mutant:
	for(i=0; i<=set->nSubSetSizes[subSetIndex]; i++) {


1158.
< ==> >=

mutant:
	for(i=0; i>=set->nSubSetSizes[subSetIndex]; i++) {


1159.
< ==> !=

mutant:
	for(i=0; i!=set->nSubSetSizes[subSetIndex]; i++) {


1160.
\+\+ ==> --

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i--) {


1161.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for(i=1; i<set->nSubSetSizes[subSetIndex]; i++) {


1162.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for(i=-1; i<set->nSubSetSizes[subSetIndex]; i++) {


1163.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for(i=(0+1); i<set->nSubSetSizes[subSetIndex]; i++) {


1164.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for(i=(0-1); i<set->nSubSetSizes[subSetIndex]; i++) {


1165.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {
	break;


1166.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {
	continue;


1167.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {*/


1168.
\+ ==> -

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] -= 1;


1169.
\+ ==> *

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] *= 1;


1170.
\+ ==> /

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] /= 1;


1171.
\+ ==> %

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] %= 1;


1172.
-([^>]) ==> +\1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] + 1] += 1;


1173.
-([^>]) ==> *\1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] * 1] += 1;


1174.
-([^>]) ==> /\1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] / 1] += 1;


1175.
-([^>]) ==> %\1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] % 1] += 1;


1176.
\+= ==> =+

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] =+ 1;


1177.
-([^>]) ==> \1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i]  1] += 1;


1178.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 0] += 1;


1179.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] += 0;


1180.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - -1] += 1;


1181.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] += -1;


1182.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - (1+1)] += 1;


1183.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] += (1+1);


1184.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - (1-1)] += 1;


1185.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] += (1-1);


1186.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] += 1;
		break;


1187.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] += 1;
		continue;


1188.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*solution->boolIncluded[set->subsets[subSetIndex][i] - 1] += 1;*/


1189.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


1190.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


1191.
\+ ==> -

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i-+) {


1192.
\+ ==> -

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i+-) {


1193.
\+ ==> *

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i*+) {


1194.
\+ ==> *

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i+*) {


1195.
\+ ==> /

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i/+) {


1196.
\+ ==> /

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i+/) {


1197.
\+ ==> %

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i%+) {


1198.
\+ ==> %

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i+%) {


1199.
\* ==> +

mutant:
	/+for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {


1200.
\* ==> -

mutant:
	/-for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {


1201.
\* ==> /

mutant:
	//for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {


1202.
\* ==> %

mutant:
	/%for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {


1203.
< ==> >

mutant:
	/*for(i=0; i>set->nSubSetSizes[subSetIndex]; i++) {


1204.
< ==> ==

mutant:
	/*for(i=0; i==set->nSubSetSizes[subSetIndex]; i++) {


1205.
< ==> <=

mutant:
	/*for(i=0; i<=set->nSubSetSizes[subSetIndex]; i++) {


1206.
< ==> >=

mutant:
	/*for(i=0; i>=set->nSubSetSizes[subSetIndex]; i++) {


1207.
< ==> !=

mutant:
	/*for(i=0; i!=set->nSubSetSizes[subSetIndex]; i++) {


1208.
\+\+ ==> --

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i--) {


1209.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	/*for(i=1; i<set->nSubSetSizes[subSetIndex]; i++) {


1210.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	/*for(i=-1; i<set->nSubSetSizes[subSetIndex]; i++) {


1211.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	/*for(i=(0+1); i<set->nSubSetSizes[subSetIndex]; i++) {


1212.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	/*for(i=(0-1); i<set->nSubSetSizes[subSetIndex]; i++) {


1213.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {
	break;


1214.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {
	continue;


1215.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {*/


1216.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		printf("%u ",solution->boolIncluded[i]);
		break;


1217.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		printf("%u ",solution->boolIncluded[i]);
		continue;


1218.
".+" ==> ""

mutant:
		printf("",solution->boolIncluded[i]);


1219.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
		printf(solution->boolIncluded[i],"%u ");


1220.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*printf("%u ",solution->boolIncluded[i]);*/


1221.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


1222.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


1223.
\* ==> +

mutant:
	printf("\n");+/


1224.
\* ==> -

mutant:
	printf("\n");-/


1225.
\* ==> /

mutant:
	printf("\n");//


1226.
\* ==> %

mutant:
	printf("\n");%/


1227.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	printf("\n");*/
	break;


1228.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	printf("\n");*/
	continue;


1229.
".+" ==> ""

mutant:
	printf("");*/


1230.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*printf("\n");*/*/


1231.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


1232.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


1233.
\* ==> +

mutant:
void removeSubSet(Solution+ solution, int subSetIndex) {


1234.
\* ==> -

mutant:
void removeSubSet(Solution- solution, int subSetIndex) {


1235.
\* ==> /

mutant:
void removeSubSet(Solution/ solution, int subSetIndex) {


1236.
\* ==> %

mutant:
void removeSubSet(Solution% solution, int subSetIndex) {


1237.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
void removeSubSet(Solution* solution, int subSetIndex) {
break;


1238.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
void removeSubSet(Solution* solution, int subSetIndex) {
continue;


1239.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
void removeSubSet( int subSetIndex,Solution* solution) {


1240.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*void removeSubSet(Solution* solution, int subSetIndex) {*/


1241.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int i;
	break;


1242.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int i;
	continue;


1243.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int i;*/


1244.
-([^>]) ==> +\1

mutant:
	solution->subSets[solution->nSolutionSize+1] = -1;


1245.
-([^>]) ==> +\1

mutant:
	solution->subSets[solution->nSolutionSize-1] = +1;


1246.
-([^>]) ==> *\1

mutant:
	solution->subSets[solution->nSolutionSize*1] = -1;


1247.
-([^>]) ==> *\1

mutant:
	solution->subSets[solution->nSolutionSize-1] = *1;


1248.
-([^>]) ==> /\1

mutant:
	solution->subSets[solution->nSolutionSize/1] = -1;


1249.
-([^>]) ==> /\1

mutant:
	solution->subSets[solution->nSolutionSize-1] = /1;


1250.
-([^>]) ==> %\1

mutant:
	solution->subSets[solution->nSolutionSize%1] = -1;


1251.
-([^>]) ==> %\1

mutant:
	solution->subSets[solution->nSolutionSize-1] = %1;


1252.
-([^>]) ==> \1

mutant:
	solution->subSets[solution->nSolutionSize1] = -1;


1253.
-([^>]) ==> \1

mutant:
	solution->subSets[solution->nSolutionSize-1] = 1;


1254.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
	solution->subSets[solution->nSolutionSize-0] = -1;


1255.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
	solution->subSets[solution->nSolutionSize-1] = -0;


1256.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	solution->subSets[solution->nSolutionSize--1] = -1;


1257.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	solution->subSets[solution->nSolutionSize-1] = --1;


1258.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	solution->subSets[solution->nSolutionSize-(1+1)] = -1;


1259.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	solution->subSets[solution->nSolutionSize-1] = -(1+1);


1260.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	solution->subSets[solution->nSolutionSize-(1-1)] = -1;


1261.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	solution->subSets[solution->nSolutionSize-1] = -(1-1);


1262.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	solution->subSets[solution->nSolutionSize-1] = -1;
	break;


1263.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	solution->subSets[solution->nSolutionSize-1] = -1;
	continue;


1264.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*solution->subSets[solution->nSolutionSize-1] = -1;*/


1265.
-([^>]) ==> +\1

mutant:
	solution->nSolutionSize+-;


1266.
-([^>]) ==> +\1

mutant:
	solution->nSolutionSize-+;


1267.
-([^>]) ==> *\1

mutant:
	solution->nSolutionSize*-;


1268.
-([^>]) ==> *\1

mutant:
	solution->nSolutionSize-*;


1269.
-([^>]) ==> /\1

mutant:
	solution->nSolutionSize/-;


1270.
-([^>]) ==> /\1

mutant:
	solution->nSolutionSize-/;


1271.
-([^>]) ==> %\1

mutant:
	solution->nSolutionSize%-;


1272.
-([^>]) ==> %\1

mutant:
	solution->nSolutionSize-%;


1273.
-- ==> ++

mutant:
	solution->nSolutionSize++;


1274.
-([^>]) ==> \1

mutant:
	solution->nSolutionSize-;


1275.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	solution->nSolutionSize--;
	break;


1276.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	solution->nSolutionSize--;
	continue;


1277.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*solution->nSolutionSize--;*/


1278.
\+ ==> -

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i-+) {


1279.
\+ ==> -

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i+-) {


1280.
\+ ==> *

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i*+) {


1281.
\+ ==> *

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i+*) {


1282.
\+ ==> /

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i/+) {


1283.
\+ ==> /

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i+/) {


1284.
\+ ==> %

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i%+) {


1285.
\+ ==> %

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i+%) {


1286.
< ==> >

mutant:
	for(i=0; i>set->nSubSetSizes[subSetIndex]; i++) {


1287.
< ==> ==

mutant:
	for(i=0; i==set->nSubSetSizes[subSetIndex]; i++) {


1288.
< ==> <=

mutant:
	for(i=0; i<=set->nSubSetSizes[subSetIndex]; i++) {


1289.
< ==> >=

mutant:
	for(i=0; i>=set->nSubSetSizes[subSetIndex]; i++) {


1290.
< ==> !=

mutant:
	for(i=0; i!=set->nSubSetSizes[subSetIndex]; i++) {


1291.
\+\+ ==> --

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i--) {


1292.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for(i=1; i<set->nSubSetSizes[subSetIndex]; i++) {


1293.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for(i=-1; i<set->nSubSetSizes[subSetIndex]; i++) {


1294.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for(i=(0+1); i<set->nSubSetSizes[subSetIndex]; i++) {


1295.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for(i=(0-1); i<set->nSubSetSizes[subSetIndex]; i++) {


1296.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {
	break;


1297.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {
	continue;


1298.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for(i=0; i<set->nSubSetSizes[subSetIndex]; i++) {*/


1299.
-([^>]) ==> +\1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] + 1] -= 1;


1300.
-([^>]) ==> +\1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] += 1;


1301.
-([^>]) ==> *\1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] * 1] -= 1;


1302.
-([^>]) ==> *\1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] *= 1;


1303.
-([^>]) ==> /\1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] / 1] -= 1;


1304.
-([^>]) ==> /\1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] /= 1;


1305.
-([^>]) ==> %\1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] % 1] -= 1;


1306.
-([^>]) ==> %\1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] %= 1;


1307.
-= ==> =-

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] =- 1;


1308.
-([^>]) ==> \1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i]  1] -= 1;


1309.
-([^>]) ==> \1

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] = 1;


1310.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 0] -= 1;


1311.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] -= 0;


1312.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - -1] -= 1;


1313.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] -= -1;


1314.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - (1+1)] -= 1;


1315.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] -= (1+1);


1316.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - (1-1)] -= 1;


1317.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] -= (1-1);


1318.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] -= 1;
		break;


1319.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		solution->boolIncluded[set->subsets[subSetIndex][i] - 1] -= 1;
		continue;


1320.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*solution->boolIncluded[set->subsets[subSetIndex][i] - 1] -= 1;*/


1321.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


1322.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


1323.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


1324.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


1325.
\* ==> +

mutant:
bool containsSubSet(Solution+ solution, int subSetIndex) {


1326.
\* ==> -

mutant:
bool containsSubSet(Solution- solution, int subSetIndex) {


1327.
\* ==> /

mutant:
bool containsSubSet(Solution/ solution, int subSetIndex) {


1328.
\* ==> %

mutant:
bool containsSubSet(Solution% solution, int subSetIndex) {


1329.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
bool containsSubSet(Solution* solution, int subSetIndex) {
break;


1330.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
bool containsSubSet(Solution* solution, int subSetIndex) {
continue;


1331.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
bool containsSubSet( int subSetIndex,Solution* solution) {


1332.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*bool containsSubSet(Solution* solution, int subSetIndex) {*/


1333.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int i;
	break;


1334.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int i;
	continue;


1335.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int i;*/


1336.
\+ ==> -

mutant:
	for(i=0; i<solution->nSolutionSize; i-+) {


1337.
\+ ==> -

mutant:
	for(i=0; i<solution->nSolutionSize; i+-) {


1338.
\+ ==> *

mutant:
	for(i=0; i<solution->nSolutionSize; i*+) {


1339.
\+ ==> *

mutant:
	for(i=0; i<solution->nSolutionSize; i+*) {


1340.
\+ ==> /

mutant:
	for(i=0; i<solution->nSolutionSize; i/+) {


1341.
\+ ==> /

mutant:
	for(i=0; i<solution->nSolutionSize; i+/) {


1342.
\+ ==> %

mutant:
	for(i=0; i<solution->nSolutionSize; i%+) {


1343.
\+ ==> %

mutant:
	for(i=0; i<solution->nSolutionSize; i+%) {


1344.
< ==> >

mutant:
	for(i=0; i>solution->nSolutionSize; i++) {


1345.
< ==> ==

mutant:
	for(i=0; i==solution->nSolutionSize; i++) {


1346.
< ==> <=

mutant:
	for(i=0; i<=solution->nSolutionSize; i++) {


1347.
< ==> >=

mutant:
	for(i=0; i>=solution->nSolutionSize; i++) {


1348.
< ==> !=

mutant:
	for(i=0; i!=solution->nSolutionSize; i++) {


1349.
\+\+ ==> --

mutant:
	for(i=0; i<solution->nSolutionSize; i--) {


1350.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for(i=1; i<solution->nSolutionSize; i++) {


1351.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for(i=-1; i<solution->nSolutionSize; i++) {


1352.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for(i=(0+1); i<solution->nSolutionSize; i++) {


1353.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for(i=(0-1); i<solution->nSolutionSize; i++) {


1354.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for(i=0; i<solution->nSolutionSize; i++) {
	break;


1355.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for(i=0; i<solution->nSolutionSize; i++) {
	continue;


1356.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for(i=0; i<solution->nSolutionSize; i++) {*/


1357.
== ==> !=

mutant:
		if(solution->subSets[i] != subSetIndex) {


1358.
== ==> <=

mutant:
		if(solution->subSets[i] <= subSetIndex) {


1359.
== ==> >=

mutant:
		if(solution->subSets[i] >= subSetIndex) {


1360.
== ==> >

mutant:
		if(solution->subSets[i] > subSetIndex) {


1361.
== ==> <

mutant:
		if(solution->subSets[i] < subSetIndex) {


1362.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		if(solution->subSets[i] == subSetIndex) {
		break;


1363.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		if(solution->subSets[i] == subSetIndex) {
		continue;


1364.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*if(solution->subSets[i] == subSetIndex) {*/


1365.
if(\(.*\)) ==> if (!\1)

mutant:
		if (!(solution->subSets[i] == subSetIndex)) {


1366.
if(\(.*\)) ==> if(0==1)

mutant:
		if(0==1) {


1367.
if(\(.*\)) ==> if(1==1)

mutant:
		if(1==1) {


1368.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			return true;
			break;


1369.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			return true;
			continue;


1370.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*return true;*/


1371.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


1372.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


1373.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


1374.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


1375.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	return false;
	break;


1376.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	return false;
	continue;


1377.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*return false;*/


1378.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


1379.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


1380.
\* ==> +

mutant:
bool checkSolution(Solution+ solution) {


1381.
\* ==> -

mutant:
bool checkSolution(Solution- solution) {


1382.
\* ==> /

mutant:
bool checkSolution(Solution/ solution) {


1383.
\* ==> %

mutant:
bool checkSolution(Solution% solution) {


1384.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
bool checkSolution(Solution* solution) {
break;


1385.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
bool checkSolution(Solution* solution) {
continue;


1386.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*bool checkSolution(Solution* solution) {*/


1387.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int i;
	break;


1388.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int i;
	continue;


1389.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int i;*/


1390.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	bool allDone = true;
	break;


1391.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	bool allDone = true;
	continue;


1392.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*bool allDone = true;*/


1393.
\+ ==> -

mutant:
	for(i=0; i<set->nGlobalSetSize; i-+) {


1394.
\+ ==> -

mutant:
	for(i=0; i<set->nGlobalSetSize; i+-) {


1395.
\+ ==> *

mutant:
	for(i=0; i<set->nGlobalSetSize; i*+) {


1396.
\+ ==> *

mutant:
	for(i=0; i<set->nGlobalSetSize; i+*) {


1397.
\+ ==> /

mutant:
	for(i=0; i<set->nGlobalSetSize; i/+) {


1398.
\+ ==> /

mutant:
	for(i=0; i<set->nGlobalSetSize; i+/) {


1399.
\+ ==> %

mutant:
	for(i=0; i<set->nGlobalSetSize; i%+) {


1400.
\+ ==> %

mutant:
	for(i=0; i<set->nGlobalSetSize; i+%) {


1401.
< ==> >

mutant:
	for(i=0; i>set->nGlobalSetSize; i++) {


1402.
< ==> ==

mutant:
	for(i=0; i==set->nGlobalSetSize; i++) {


1403.
< ==> <=

mutant:
	for(i=0; i<=set->nGlobalSetSize; i++) {


1404.
< ==> >=

mutant:
	for(i=0; i>=set->nGlobalSetSize; i++) {


1405.
< ==> !=

mutant:
	for(i=0; i!=set->nGlobalSetSize; i++) {


1406.
\+\+ ==> --

mutant:
	for(i=0; i<set->nGlobalSetSize; i--) {


1407.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for(i=1; i<set->nGlobalSetSize; i++) {


1408.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for(i=-1; i<set->nGlobalSetSize; i++) {


1409.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for(i=(0+1); i<set->nGlobalSetSize; i++) {


1410.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for(i=(0-1); i<set->nGlobalSetSize; i++) {


1411.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for(i=0; i<set->nGlobalSetSize; i++) {
	break;


1412.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for(i=0; i<set->nGlobalSetSize; i++) {
	continue;


1413.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for(i=0; i<set->nGlobalSetSize; i++) {*/


1414.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		int boolInc = solution->boolIncluded[i];
		break;


1415.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		int boolInc = solution->boolIncluded[i];
		continue;


1416.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*int boolInc = solution->boolIncluded[i];*/


1417.
== ==> !=

mutant:
		if(boolInc != 0) {


1418.
== ==> <=

mutant:
		if(boolInc <= 0) {


1419.
== ==> >=

mutant:
		if(boolInc >= 0) {


1420.
== ==> >

mutant:
		if(boolInc > 0) {


1421.
== ==> <

mutant:
		if(boolInc < 0) {


1422.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		if(boolInc == 1) {


1423.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		if(boolInc == -1) {


1424.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		if(boolInc == (0+1)) {


1425.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		if(boolInc == (0-1)) {


1426.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		if(boolInc == 0) {
		break;


1427.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		if(boolInc == 0) {
		continue;


1428.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*if(boolInc == 0) {*/


1429.
if(\(.*\)) ==> if (!\1)

mutant:
		if (!(boolInc == 0)) {


1430.
if(\(.*\)) ==> if(0==1)

mutant:
		if(0==1) {


1431.
if(\(.*\)) ==> if(1==1)

mutant:
		if(1==1) {


1432.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			return false;
			break;


1433.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			return false;
			continue;


1434.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*return false;*/


1435.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


1436.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


1437.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


1438.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


1439.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	return allDone;
	break;


1440.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	return allDone;
	continue;


1441.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*return allDone;*/


1442.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


1443.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


1444.
\* ==> +

mutant:
void printSolution(Solution+ solution) {


1445.
\* ==> -

mutant:
void printSolution(Solution- solution) {


1446.
\* ==> /

mutant:
void printSolution(Solution/ solution) {


1447.
\* ==> %

mutant:
void printSolution(Solution% solution) {


1448.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
void printSolution(Solution* solution) {
break;


1449.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
void printSolution(Solution* solution) {
continue;


1450.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*void printSolution(Solution* solution) {*/


1451.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int i;
	break;


1452.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int i;
	continue;


1453.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int i;*/


1454.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	printf("(%u)\n",solution->nSolutionSize);
	break;


1455.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	printf("(%u)\n",solution->nSolutionSize);
	continue;


1456.
".+" ==> ""

mutant:
	printf("",solution->nSolutionSize);


1457.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
	printf(solution->nSolutionSize,"(%u)\n");


1458.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
	printf("(solution->nSolutionSize,%u)\n");


1459.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*printf("(%u)\n",solution->nSolutionSize);*/


1460.
\+ ==> -

mutant:
	for(i=0; i<solution->nSolutionSize; i-+) {


1461.
\+ ==> -

mutant:
	for(i=0; i<solution->nSolutionSize; i+-) {


1462.
\+ ==> *

mutant:
	for(i=0; i<solution->nSolutionSize; i*+) {


1463.
\+ ==> *

mutant:
	for(i=0; i<solution->nSolutionSize; i+*) {


1464.
\+ ==> /

mutant:
	for(i=0; i<solution->nSolutionSize; i/+) {


1465.
\+ ==> /

mutant:
	for(i=0; i<solution->nSolutionSize; i+/) {


1466.
\+ ==> %

mutant:
	for(i=0; i<solution->nSolutionSize; i%+) {


1467.
\+ ==> %

mutant:
	for(i=0; i<solution->nSolutionSize; i+%) {


1468.
< ==> >

mutant:
	for(i=0; i>solution->nSolutionSize; i++) {


1469.
< ==> ==

mutant:
	for(i=0; i==solution->nSolutionSize; i++) {


1470.
< ==> <=

mutant:
	for(i=0; i<=solution->nSolutionSize; i++) {


1471.
< ==> >=

mutant:
	for(i=0; i>=solution->nSolutionSize; i++) {


1472.
< ==> !=

mutant:
	for(i=0; i!=solution->nSolutionSize; i++) {


1473.
\+\+ ==> --

mutant:
	for(i=0; i<solution->nSolutionSize; i--) {


1474.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for(i=1; i<solution->nSolutionSize; i++) {


1475.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for(i=-1; i<solution->nSolutionSize; i++) {


1476.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for(i=(0+1); i<solution->nSolutionSize; i++) {


1477.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for(i=(0-1); i<solution->nSolutionSize; i++) {


1478.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for(i=0; i<solution->nSolutionSize; i++) {
	break;


1479.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for(i=0; i<solution->nSolutionSize; i++) {
	continue;


1480.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for(i=0; i<solution->nSolutionSize; i++) {*/


1481.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		printf("(%u) ", set->originalOrder[solution->subSets[i]]);
		break;


1482.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		printf("(%u) ", set->originalOrder[solution->subSets[i]]);
		continue;


1483.
".+" ==> ""

mutant:
		printf("", set->originalOrder[solution->subSets[i]]);


1484.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
		printf( set->originalOrder[solution->subSets[i]],"(%u) ");


1485.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
		printf("( set->originalOrder[solution->subSets[i]],%u) ");


1486.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*printf("(%u) ", set->originalOrder[solution->subSets[i]]);*/


1487.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		printSubSet(solution->subSets[i]);
		break;


1488.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		printSubSet(solution->subSets[i]);
		continue;


1489.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*printSubSet(solution->subSets[i]);*/


1490.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


1491.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


1492.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


1493.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


1494.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
void printSubSet(int nSubSetIndex) {
break;


1495.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
void printSubSet(int nSubSetIndex) {
continue;


1496.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*void printSubSet(int nSubSetIndex) {*/


1497.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int j;
	break;


1498.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int j;
	continue;


1499.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int j;*/


1500.
\+ ==> -

mutant:
	for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j-+) {


1501.
\+ ==> -

mutant:
	for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j+-) {


1502.
\+ ==> *

mutant:
	for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j*+) {


1503.
\+ ==> *

mutant:
	for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j+*) {


1504.
\+ ==> /

mutant:
	for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j/+) {


1505.
\+ ==> /

mutant:
	for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j+/) {


1506.
\+ ==> %

mutant:
	for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j%+) {


1507.
\+ ==> %

mutant:
	for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j+%) {


1508.
< ==> >

mutant:
	for (j = 0; j > set->nSubSetSizes[nSubSetIndex]; j++) {


1509.
< ==> ==

mutant:
	for (j = 0; j == set->nSubSetSizes[nSubSetIndex]; j++) {


1510.
< ==> <=

mutant:
	for (j = 0; j <= set->nSubSetSizes[nSubSetIndex]; j++) {


1511.
< ==> >=

mutant:
	for (j = 0; j >= set->nSubSetSizes[nSubSetIndex]; j++) {


1512.
< ==> !=

mutant:
	for (j = 0; j != set->nSubSetSizes[nSubSetIndex]; j++) {


1513.
\+\+ ==> --

mutant:
	for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j--) {


1514.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	for (j = 1; j < set->nSubSetSizes[nSubSetIndex]; j++) {


1515.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for (j = -1; j < set->nSubSetSizes[nSubSetIndex]; j++) {


1516.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for (j = (0+1); j < set->nSubSetSizes[nSubSetIndex]; j++) {


1517.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for (j = (0-1); j < set->nSubSetSizes[nSubSetIndex]; j++) {


1518.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j++) {
	break;


1519.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j++) {
	continue;


1520.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for (j = 0; j < set->nSubSetSizes[nSubSetIndex]; j++) {*/


1521.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		printf("%u ", set->subsets[nSubSetIndex][j]);
		break;


1522.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		printf("%u ", set->subsets[nSubSetIndex][j]);
		continue;


1523.
".+" ==> ""

mutant:
		printf("", set->subsets[nSubSetIndex][j]);


1524.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
		printf( set->subsets[nSubSetIndex][j],"%u ");


1525.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*printf("%u ", set->subsets[nSubSetIndex][j]);*/


1526.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


1527.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


1528.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	printf("\n");
	break;


1529.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	printf("\n");
	continue;


1530.
".+" ==> ""

mutant:
	printf("");


1531.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*printf("\n");*/


1532.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


1533.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


1534.
\* ==> +

mutant:
bool GetALine(FILE +f, char buf[]) {


1535.
\* ==> -

mutant:
bool GetALine(FILE -f, char buf[]) {


1536.
\* ==> /

mutant:
bool GetALine(FILE /f, char buf[]) {


1537.
\* ==> %

mutant:
bool GetALine(FILE %f, char buf[]) {


1538.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
bool GetALine(FILE *f, char buf[]) {
break;


1539.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
bool GetALine(FILE *f, char buf[]) {
continue;


1540.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
bool GetALine( char buf[],FILE *f) {


1541.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*bool GetALine(FILE *f, char buf[]) {*/


1542.
\* ==> +

mutant:
	/+ Read a line of possibly commented input from the file *f.*/


1543.
\* ==> +

mutant:
	/* Read a line of possibly commented input from the file +f.*/


1544.
\* ==> +

mutant:
	/* Read a line of possibly commented input from the file *f.+/


1545.
\* ==> -

mutant:
	/- Read a line of possibly commented input from the file *f.*/


1546.
\* ==> -

mutant:
	/* Read a line of possibly commented input from the file -f.*/


1547.
\* ==> -

mutant:
	/* Read a line of possibly commented input from the file *f.-/


1548.
\* ==> /

mutant:
	// Read a line of possibly commented input from the file *f.*/


1549.
\* ==> /

mutant:
	/* Read a line of possibly commented input from the file /f.*/


1550.
\* ==> /

mutant:
	/* Read a line of possibly commented input from the file *f.//


1551.
\* ==> %

mutant:
	/% Read a line of possibly commented input from the file *f.*/


1552.
\* ==> %

mutant:
	/* Read a line of possibly commented input from the file %f.*/


1553.
\* ==> %

mutant:
	/* Read a line of possibly commented input from the file *f.%/


1554.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	/* Read a line of possibly commented input from the file *f.*/
	break;


1555.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	/* Read a line of possibly commented input from the file *f.*/
	continue;


1556.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*/* Read a line of possibly commented input from the file *f.*/*/


1557.
\* ==> +

mutant:
	char +p;


1558.
\* ==> -

mutant:
	char -p;


1559.
\* ==> /

mutant:
	char /p;


1560.
\* ==> %

mutant:
	char %p;


1561.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	char *p;
	break;


1562.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	char *p;
	continue;


1563.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*char *p;*/


1564.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	bool not_eof = false;
	break;


1565.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	bool not_eof = false;
	continue;


1566.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*bool not_eof = false;*/


1567.
!= ==> ==

mutant:
	while ( fgets(buf, 1024, f) == NULL) {


1568.
!= ==> <=

mutant:
	while ( fgets(buf, 1024, f) <= NULL) {


1569.
!= ==> >=

mutant:
	while ( fgets(buf, 1024, f) >= NULL) {


1570.
!= ==> >

mutant:
	while ( fgets(buf, 1024, f) > NULL) {


1571.
!= ==> <

mutant:
	while ( fgets(buf, 1024, f) < NULL) {


1572.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
	while ( fgets(buf, 0, f) != NULL) {


1573.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	while ( fgets(buf, 1, f) != NULL) {


1574.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	while ( fgets(buf, -1, f) != NULL) {


1575.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	while ( fgets(buf, (1024+1), f) != NULL) {


1576.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	while ( fgets(buf, (1024-1), f) != NULL) {


1577.
! ==>

mutant:
	while ( fgets(buf, 1024, f) = NULL) {


1578.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	while ( fgets(buf, 1024, f) != NULL) {
	break;


1579.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	while ( fgets(buf, 1024, f) != NULL) {
	continue;


1580.
while ==> if

mutant:
	if ( fgets(buf, 1024, f) != NULL) {


1581.
,([^,]+),([^,\)\]]+) ==> ,\2,\1

mutant:
	while ( fgets(buf, f, 1024) != NULL) {


1582.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
	while ( 1024, fgets(buf, f) != NULL) {


1583.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
	while ( fgets( 1024,buf, f) != NULL) {


1584.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*while ( fgets(buf, 1024, f) != NULL) {*/


1585.
while (\(.*\)) ==> while (!\1)

mutant:
	while (!( fgets(buf, 1024, f) != NULL)) {


1586.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		p=strchr(buf, (int) '\n');
		break;


1587.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		p=strchr(buf, (int) '\n');
		continue;


1588.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
		p=strchr( (int,buf) '\n');


1589.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*p=strchr(buf, (int) '\n');*/


1590.
!= ==> ==

mutant:
		if ( p == NULL )


1591.
!= ==> <=

mutant:
		if ( p <= NULL )


1592.
!= ==> >=

mutant:
		if ( p >= NULL )


1593.
!= ==> >

mutant:
		if ( p > NULL )


1594.
!= ==> <

mutant:
		if ( p < NULL )


1595.
! ==>

mutant:
		if ( p = NULL )


1596.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		if ( p != NULL )
		break;


1597.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		if ( p != NULL )
		continue;


1598.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*if ( p != NULL )*/


1599.
if (\(.*\)) ==> if (!\1)

mutant:
		if (!( p != NULL ))


1600.
if (\(.*\)) ==> if (0==1)

mutant:
		if (0==1)


1601.
if (\(.*\)) ==> if (1==1)

mutant:
		if (1==1)


1602.
\* ==> +

mutant:
			+p = '\0';


1603.
\* ==> -

mutant:
			-p = '\0';


1604.
\* ==> /

mutant:
			/p = '\0';


1605.
\* ==> %

mutant:
			%p = '\0';


1606.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
			*p = '\1';


1607.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			*p = '\-1';


1608.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			*p = '\(0+1)';


1609.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			*p = '\(0-1)';


1610.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			*p = '\0';
			break;


1611.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			*p = '\0';
			continue;


1612.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/**p = '\0';*/


1613.
\* ==> +

mutant:
		if (+buf != '\0') {


1614.
\* ==> -

mutant:
		if (-buf != '\0') {


1615.
\* ==> /

mutant:
		if (/buf != '\0') {


1616.
\* ==> %

mutant:
		if (%buf != '\0') {


1617.
!= ==> ==

mutant:
		if (*buf == '\0') {


1618.
!= ==> <=

mutant:
		if (*buf <= '\0') {


1619.
!= ==> >=

mutant:
		if (*buf >= '\0') {


1620.
!= ==> >

mutant:
		if (*buf > '\0') {


1621.
!= ==> <

mutant:
		if (*buf < '\0') {


1622.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		if (*buf != '\1') {


1623.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		if (*buf != '\-1') {


1624.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		if (*buf != '\(0+1)') {


1625.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		if (*buf != '\(0-1)') {


1626.
! ==>

mutant:
		if (*buf = '\0') {


1627.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		if (*buf != '\0') {
		break;


1628.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		if (*buf != '\0') {
		continue;


1629.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*if (*buf != '\0') {*/


1630.
if (\(.*\)) ==> if (!\1)

mutant:
		if (!(*buf != '\0')) {


1631.
if (\(.*\)) ==> if (0==1)

mutant:
		if (0==1) {


1632.
if (\(.*\)) ==> if (1==1)

mutant:
		if (1==1) {


1633.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			not_eof = true;
			break;


1634.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			not_eof = true;
			continue;


1635.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*not_eof = true;*/


1636.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			break;
			break;


1637.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			break;
			continue;


1638.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*break;*/


1639.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


1640.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


1641.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


1642.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


1643.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	return (not_eof);
	break;


1644.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	return (not_eof);
	continue;


1645.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*return (not_eof);*/


1646.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


1647.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


1648.
\* ==> +

mutant:
int readGameFile(const char +s) {


1649.
\* ==> -

mutant:
int readGameFile(const char -s) {


1650.
\* ==> /

mutant:
int readGameFile(const char /s) {


1651.
\* ==> %

mutant:
int readGameFile(const char %s) {


1652.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
int readGameFile(const char *s) {
break;


1653.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
int readGameFile(const char *s) {
continue;


1654.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*int readGameFile(const char *s) {*/


1655.
\* ==> +

mutant:
	FILE +f;


1656.
\* ==> -

mutant:
	FILE -f;


1657.
\* ==> /

mutant:
	FILE /f;


1658.
\* ==> %

mutant:
	FILE %f;


1659.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	FILE *f;
	break;


1660.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	FILE *f;
	continue;


1661.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*FILE *f;*/


1662.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	int lineno=1, i=0;


1663.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	int lineno=0, i=1;


1664.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	int lineno=-1, i=0;


1665.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	int lineno=0, i=-1;


1666.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	int lineno=(0+1), i=0;


1667.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	int lineno=0, i=(0+1);


1668.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	int lineno=(0-1), i=0;


1669.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	int lineno=0, i=(0-1);


1670.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int lineno=0, i=0;
	break;


1671.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int lineno=0, i=0;
	continue;


1672.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int lineno=0, i=0;*/


1673.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	int subSetSize=1;


1674.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	int subSetSize=-1;


1675.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	int subSetSize=(0+1);


1676.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	int subSetSize=(0-1);


1677.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int subSetSize=0;
	break;


1678.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int subSetSize=0;
	continue;


1679.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int subSetSize=0;*/


1680.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	int nCurrSubSet=1;


1681.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	int nCurrSubSet=-1;


1682.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	int nCurrSubSet=(0+1);


1683.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	int nCurrSubSet=(0-1);


1684.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int nCurrSubSet=0;
	break;


1685.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int nCurrSubSet=0;
	continue;


1686.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int nCurrSubSet=0;*/


1687.
\* ==> +

mutant:
	char + pch;


1688.
\* ==> -

mutant:
	char - pch;


1689.
\* ==> /

mutant:
	char / pch;


1690.
\* ==> %

mutant:
	char % pch;


1691.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	char * pch;
	break;


1692.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	char * pch;
	continue;


1693.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*char * pch;*/


1694.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
	char buf[0];


1695.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	char buf[1];


1696.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	char buf[-1];


1697.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	char buf[(1024+1)];


1698.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	char buf[(1024-1)];


1699.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	char buf[1024];
	break;


1700.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	char buf[1024];
	continue;


1701.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*char buf[1024];*/


1702.
== ==> !=

mutant:
	if(s!=NULL)	


1703.
== ==> <=

mutant:
	if(s<=NULL)	


1704.
== ==> >=

mutant:
	if(s>=NULL)	


1705.
== ==> >

mutant:
	if(s>NULL)	


1706.
== ==> <

mutant:
	if(s<NULL)	


1707.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	if(s==NULL)	
	break;


1708.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	if(s==NULL)	
	continue;


1709.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*if(s==NULL)	*/


1710.
if(\(.*\)) ==> if (!\1)

mutant:
	if (!(s==NULL))	


1711.
if(\(.*\)) ==> if(0==1)

mutant:
	if(0==1)	


1712.
if(\(.*\)) ==> if(1==1)

mutant:
	if(1==1)	


1713.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		return 0;


1714.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		return -1;


1715.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		return (1+1);


1716.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		return (1-1);


1717.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		return 1;
		break;


1718.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		return 1;
		continue;


1719.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*return 1;*/


1720.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	//printf("%s\n", s);
	break;


1721.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	//printf("%s\n", s);
	continue;


1722.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*//printf("%s\n", s);*/


1723.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	f = fopen(s, "r");
	break;


1724.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	f = fopen(s, "r");
	continue;


1725.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
	f = fopen( "r",s);


1726.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*f = fopen(s, "r");*/


1727.
== ==> !=

mutant:
	if(f != NULL) {


1728.
== ==> <=

mutant:
	if(f <= NULL) {


1729.
== ==> >=

mutant:
	if(f >= NULL) {


1730.
== ==> >

mutant:
	if(f > NULL) {


1731.
== ==> <

mutant:
	if(f < NULL) {


1732.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	if(f == NULL) {
	break;


1733.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	if(f == NULL) {
	continue;


1734.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*if(f == NULL) {*/


1735.
if(\(.*\)) ==> if (!\1)

mutant:
	if (!(f == NULL)) {


1736.
if(\(.*\)) ==> if(0==1)

mutant:
	if(0==1) {


1737.
if(\(.*\)) ==> if(1==1)

mutant:
	if(1==1) {


1738.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		printf("Could not open file\n");
		break;


1739.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		printf("Could not open file\n");
		continue;


1740.
".+" ==> ""

mutant:
		printf("");


1741.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*printf("Could not open file\n");*/


1742.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		return 0;


1743.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		return -1;


1744.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		return (1+1);


1745.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		return (1-1);


1746.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		return 1;
		break;


1747.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		return 1;
		continue;


1748.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*return 1;*/


1749.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


1750.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


1751.
\* ==> +

mutant:
	set = (Set +)malloc(sizeof(Set));


1752.
\* ==> -

mutant:
	set = (Set -)malloc(sizeof(Set));


1753.
\* ==> /

mutant:
	set = (Set /)malloc(sizeof(Set));


1754.
\* ==> %

mutant:
	set = (Set %)malloc(sizeof(Set));


1755.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	set = (Set *)malloc(sizeof(Set));
	break;


1756.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	set = (Set *)malloc(sizeof(Set));
	continue;


1757.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*set = (Set *)malloc(sizeof(Set));*/


1758.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	while(GetALine(f, inbuf)) {
	break;


1759.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	while(GetALine(f, inbuf)) {
	continue;


1760.
while ==> if

mutant:
	if(GetALine(f, inbuf)) {


1761.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
	while( inbuf,GetALine(f)) {


1762.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
	while(GetALine( inbuf,f)) {


1763.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*while(GetALine(f, inbuf)) {*/


1764.
while(\(.*\)) ==> while(!\1)

mutant:
	while(!(GetALine(f, inbuf))) {


1765.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		switch(lineno) {
		break;


1766.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		switch(lineno) {
		continue;


1767.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*switch(lineno) {*/


1768.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		case 1:


1769.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		case -1:


1770.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		case (0+1):


1771.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		case (0-1):


1772.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		case 0:
		break;


1773.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		case 0:
		continue;


1774.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*case 0:*/


1775.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			set->nGlobalSetSize = atoi(inbuf);
			break;


1776.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			set->nGlobalSetSize = atoi(inbuf);
			continue;


1777.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*set->nGlobalSetSize = atoi(inbuf);*/


1778.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			break;
			break;


1779.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			break;
			continue;


1780.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*break;*/


1781.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		case 0:


1782.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		case -1:


1783.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		case (1+1):


1784.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		case (1-1):


1785.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		case 1:
		break;


1786.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		case 1:
		continue;


1787.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*case 1:*/


1788.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			set->nSubSets = atoi(inbuf);
			break;


1789.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			set->nSubSets = atoi(inbuf);
			continue;


1790.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*set->nSubSets = atoi(inbuf);*/


1791.
\* ==> +

mutant:
			set->nSubSetSizes = (int +) malloc(sizeof(int) * set->nSubSets);


1792.
\* ==> +

mutant:
			set->nSubSetSizes = (int *) malloc(sizeof(int) + set->nSubSets);


1793.
\* ==> -

mutant:
			set->nSubSetSizes = (int -) malloc(sizeof(int) * set->nSubSets);


1794.
\* ==> -

mutant:
			set->nSubSetSizes = (int *) malloc(sizeof(int) - set->nSubSets);


1795.
\* ==> /

mutant:
			set->nSubSetSizes = (int /) malloc(sizeof(int) * set->nSubSets);


1796.
\* ==> /

mutant:
			set->nSubSetSizes = (int *) malloc(sizeof(int) / set->nSubSets);


1797.
\* ==> %

mutant:
			set->nSubSetSizes = (int %) malloc(sizeof(int) * set->nSubSets);


1798.
\* ==> %

mutant:
			set->nSubSetSizes = (int *) malloc(sizeof(int) % set->nSubSets);


1799.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			set->nSubSetSizes = (int *) malloc(sizeof(int) * set->nSubSets);
			break;


1800.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			set->nSubSetSizes = (int *) malloc(sizeof(int) * set->nSubSets);
			continue;


1801.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*set->nSubSetSizes = (int *) malloc(sizeof(int) * set->nSubSets);*/


1802.
\* ==> +

mutant:
			set->originalOrder = (int +) malloc(sizeof(int) * set->nSubSets);


1803.
\* ==> +

mutant:
			set->originalOrder = (int *) malloc(sizeof(int) + set->nSubSets);


1804.
\* ==> -

mutant:
			set->originalOrder = (int -) malloc(sizeof(int) * set->nSubSets);


1805.
\* ==> -

mutant:
			set->originalOrder = (int *) malloc(sizeof(int) - set->nSubSets);


1806.
\* ==> /

mutant:
			set->originalOrder = (int /) malloc(sizeof(int) * set->nSubSets);


1807.
\* ==> /

mutant:
			set->originalOrder = (int *) malloc(sizeof(int) / set->nSubSets);


1808.
\* ==> %

mutant:
			set->originalOrder = (int %) malloc(sizeof(int) * set->nSubSets);


1809.
\* ==> %

mutant:
			set->originalOrder = (int *) malloc(sizeof(int) % set->nSubSets);


1810.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			set->originalOrder = (int *) malloc(sizeof(int) * set->nSubSets);
			break;


1811.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			set->originalOrder = (int *) malloc(sizeof(int) * set->nSubSets);
			continue;


1812.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*set->originalOrder = (int *) malloc(sizeof(int) * set->nSubSets);*/


1813.
\+ ==> -

mutant:
			for(i=0; i<set->nSubSets; i-+) {


1814.
\+ ==> -

mutant:
			for(i=0; i<set->nSubSets; i+-) {


1815.
\+ ==> *

mutant:
			for(i=0; i<set->nSubSets; i*+) {


1816.
\+ ==> *

mutant:
			for(i=0; i<set->nSubSets; i+*) {


1817.
\+ ==> /

mutant:
			for(i=0; i<set->nSubSets; i/+) {


1818.
\+ ==> /

mutant:
			for(i=0; i<set->nSubSets; i+/) {


1819.
\+ ==> %

mutant:
			for(i=0; i<set->nSubSets; i%+) {


1820.
\+ ==> %

mutant:
			for(i=0; i<set->nSubSets; i+%) {


1821.
< ==> >

mutant:
			for(i=0; i>set->nSubSets; i++) {


1822.
< ==> ==

mutant:
			for(i=0; i==set->nSubSets; i++) {


1823.
< ==> <=

mutant:
			for(i=0; i<=set->nSubSets; i++) {


1824.
< ==> >=

mutant:
			for(i=0; i>=set->nSubSets; i++) {


1825.
< ==> !=

mutant:
			for(i=0; i!=set->nSubSets; i++) {


1826.
\+\+ ==> --

mutant:
			for(i=0; i<set->nSubSets; i--) {


1827.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
			for(i=1; i<set->nSubSets; i++) {


1828.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			for(i=-1; i<set->nSubSets; i++) {


1829.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			for(i=(0+1); i<set->nSubSets; i++) {


1830.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			for(i=(0-1); i<set->nSubSets; i++) {


1831.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			for(i=0; i<set->nSubSets; i++) {
			break;


1832.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			for(i=0; i<set->nSubSets; i++) {
			continue;


1833.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*for(i=0; i<set->nSubSets; i++) {*/


1834.
\+ ==> -

mutant:
				set->originalOrder[i] = i-1;


1835.
\+ ==> *

mutant:
				set->originalOrder[i] = i*1;


1836.
\+ ==> /

mutant:
				set->originalOrder[i] = i/1;


1837.
\+ ==> %

mutant:
				set->originalOrder[i] = i%1;


1838.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
				set->originalOrder[i] = i+0;


1839.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
				set->originalOrder[i] = i+-1;


1840.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
				set->originalOrder[i] = i+(1+1);


1841.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
				set->originalOrder[i] = i+(1-1);


1842.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				set->originalOrder[i] = i+1;
				break;


1843.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				set->originalOrder[i] = i+1;
				continue;


1844.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*set->originalOrder[i] = i+1;*/


1845.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			}
			break;


1846.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			}
			continue;


1847.
\* ==> +

mutant:
			set->subsets = (int+*) malloc(sizeof(int*) * set->nSubSets);


1848.
\* ==> +

mutant:
			set->subsets = (int*+) malloc(sizeof(int*) * set->nSubSets);


1849.
\* ==> +

mutant:
			set->subsets = (int**) malloc(sizeof(int+) * set->nSubSets);


1850.
\* ==> +

mutant:
			set->subsets = (int**) malloc(sizeof(int*) + set->nSubSets);


1851.
\* ==> -

mutant:
			set->subsets = (int-*) malloc(sizeof(int*) * set->nSubSets);


1852.
\* ==> -

mutant:
			set->subsets = (int*-) malloc(sizeof(int*) * set->nSubSets);


1853.
\* ==> -

mutant:
			set->subsets = (int**) malloc(sizeof(int-) * set->nSubSets);


1854.
\* ==> -

mutant:
			set->subsets = (int**) malloc(sizeof(int*) - set->nSubSets);


1855.
\* ==> /

mutant:
			set->subsets = (int/*) malloc(sizeof(int*) * set->nSubSets);


1856.
\* ==> /

mutant:
			set->subsets = (int*/) malloc(sizeof(int*) * set->nSubSets);


1857.
\* ==> /

mutant:
			set->subsets = (int**) malloc(sizeof(int/) * set->nSubSets);


1858.
\* ==> /

mutant:
			set->subsets = (int**) malloc(sizeof(int*) / set->nSubSets);


1859.
\* ==> %

mutant:
			set->subsets = (int%*) malloc(sizeof(int*) * set->nSubSets);


1860.
\* ==> %

mutant:
			set->subsets = (int*%) malloc(sizeof(int*) * set->nSubSets);


1861.
\* ==> %

mutant:
			set->subsets = (int**) malloc(sizeof(int%) * set->nSubSets);


1862.
\* ==> %

mutant:
			set->subsets = (int**) malloc(sizeof(int*) % set->nSubSets);


1863.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			set->subsets = (int**) malloc(sizeof(int*) * set->nSubSets);
			break;


1864.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			set->subsets = (int**) malloc(sizeof(int*) * set->nSubSets);
			continue;


1865.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*set->subsets = (int**) malloc(sizeof(int*) * set->nSubSets);*/


1866.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			break;
			break;


1867.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			break;
			continue;


1868.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*break;*/


1869.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		default:
		break;


1870.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		default:
		continue;


1871.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*default:*/


1872.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
			subSetSize = 1;


1873.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			subSetSize = -1;


1874.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			subSetSize = (0+1);


1875.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			subSetSize = (0-1);


1876.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			subSetSize = 0;
			break;


1877.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			subSetSize = 0;
			continue;


1878.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*subSetSize = 0;*/


1879.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			strcpy(buf, inbuf);
			break;


1880.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			strcpy(buf, inbuf);
			continue;


1881.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			strcpy( inbuf,buf);


1882.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*strcpy(buf, inbuf);*/


1883.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			pch = strtok(inbuf, " ");
			break;


1884.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			pch = strtok(inbuf, " ");
			continue;


1885.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			pch = strtok( " ",inbuf);


1886.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*pch = strtok(inbuf, " ");*/


1887.
!= ==> ==

mutant:
			while (pch == NULL) {


1888.
!= ==> <=

mutant:
			while (pch <= NULL) {


1889.
!= ==> >=

mutant:
			while (pch >= NULL) {


1890.
!= ==> >

mutant:
			while (pch > NULL) {


1891.
!= ==> <

mutant:
			while (pch < NULL) {


1892.
! ==>

mutant:
			while (pch = NULL) {


1893.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			while (pch != NULL) {
			break;


1894.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			while (pch != NULL) {
			continue;


1895.
while ==> if

mutant:
			if (pch != NULL) {


1896.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*while (pch != NULL) {*/


1897.
while (\(.*\)) ==> while (!\1)

mutant:
			while (!(pch != NULL)) {


1898.
\+ ==> -

mutant:
				subSetSize-+;


1899.
\+ ==> -

mutant:
				subSetSize+-;


1900.
\+ ==> *

mutant:
				subSetSize*+;


1901.
\+ ==> *

mutant:
				subSetSize+*;


1902.
\+ ==> /

mutant:
				subSetSize/+;


1903.
\+ ==> /

mutant:
				subSetSize+/;


1904.
\+ ==> %

mutant:
				subSetSize%+;


1905.
\+ ==> %

mutant:
				subSetSize+%;


1906.
\+\+ ==> --

mutant:
				subSetSize--;


1907.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				subSetSize++;
				break;


1908.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				subSetSize++;
				continue;


1909.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*subSetSize++;*/


1910.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				pch = strtok(NULL, " ");
				break;


1911.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				pch = strtok(NULL, " ");
				continue;


1912.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
				pch = strtok( " ",NULL);


1913.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*pch = strtok(NULL, " ");*/


1914.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			}
			break;


1915.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			}
			continue;


1916.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			set->nSubSetSizes[nCurrSubSet] = subSetSize;
			break;


1917.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			set->nSubSetSizes[nCurrSubSet] = subSetSize;
			continue;


1918.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*set->nSubSetSizes[nCurrSubSet] = subSetSize;*/


1919.
\* ==> +

mutant:
			set->subsets[nCurrSubSet] = (int +) malloc(sizeof(int) * subSetSize);


1920.
\* ==> +

mutant:
			set->subsets[nCurrSubSet] = (int *) malloc(sizeof(int) + subSetSize);


1921.
\* ==> -

mutant:
			set->subsets[nCurrSubSet] = (int -) malloc(sizeof(int) * subSetSize);


1922.
\* ==> -

mutant:
			set->subsets[nCurrSubSet] = (int *) malloc(sizeof(int) - subSetSize);


1923.
\* ==> /

mutant:
			set->subsets[nCurrSubSet] = (int /) malloc(sizeof(int) * subSetSize);


1924.
\* ==> /

mutant:
			set->subsets[nCurrSubSet] = (int *) malloc(sizeof(int) / subSetSize);


1925.
\* ==> %

mutant:
			set->subsets[nCurrSubSet] = (int %) malloc(sizeof(int) * subSetSize);


1926.
\* ==> %

mutant:
			set->subsets[nCurrSubSet] = (int *) malloc(sizeof(int) % subSetSize);


1927.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			set->subsets[nCurrSubSet] = (int *) malloc(sizeof(int) * subSetSize);
			break;


1928.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			set->subsets[nCurrSubSet] = (int *) malloc(sizeof(int) * subSetSize);
			continue;


1929.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*set->subsets[nCurrSubSet] = (int *) malloc(sizeof(int) * subSetSize);*/


1930.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
			i = 1;


1931.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			i = -1;


1932.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			i = (0+1);


1933.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			i = (0-1);


1934.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			i = 0;
			break;


1935.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			i = 0;
			continue;


1936.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*i = 0;*/


1937.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			pch = strtok(buf, " ");
			break;


1938.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			pch = strtok(buf, " ");
			continue;


1939.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			pch = strtok( " ",buf);


1940.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*pch = strtok(buf, " ");*/


1941.
!= ==> ==

mutant:
			while (pch == NULL) {


1942.
!= ==> <=

mutant:
			while (pch <= NULL) {


1943.
!= ==> >=

mutant:
			while (pch >= NULL) {


1944.
!= ==> >

mutant:
			while (pch > NULL) {


1945.
!= ==> <

mutant:
			while (pch < NULL) {


1946.
! ==>

mutant:
			while (pch = NULL) {


1947.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			while (pch != NULL) {
			break;


1948.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			while (pch != NULL) {
			continue;


1949.
while ==> if

mutant:
			if (pch != NULL) {


1950.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*while (pch != NULL) {*/


1951.
while (\(.*\)) ==> while (!\1)

mutant:
			while (!(pch != NULL)) {


1952.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				set->subsets[nCurrSubSet][i] = atoi(pch);
				break;


1953.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				set->subsets[nCurrSubSet][i] = atoi(pch);
				continue;


1954.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*set->subsets[nCurrSubSet][i] = atoi(pch);*/


1955.
\+ ==> -

mutant:
				i-+;


1956.
\+ ==> -

mutant:
				i+-;


1957.
\+ ==> *

mutant:
				i*+;


1958.
\+ ==> *

mutant:
				i+*;


1959.
\+ ==> /

mutant:
				i/+;


1960.
\+ ==> /

mutant:
				i+/;


1961.
\+ ==> %

mutant:
				i%+;


1962.
\+ ==> %

mutant:
				i+%;


1963.
\+\+ ==> --

mutant:
				i--;


1964.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				i++;
				break;


1965.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				i++;
				continue;


1966.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*i++;*/


1967.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				pch = strtok(NULL, " ");
				break;


1968.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				pch = strtok(NULL, " ");
				continue;


1969.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
				pch = strtok( " ",NULL);


1970.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*pch = strtok(NULL, " ");*/


1971.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			}
			break;


1972.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			}
			continue;


1973.
\+ ==> -

mutant:
			nCurrSubSet-+;


1974.
\+ ==> -

mutant:
			nCurrSubSet+-;


1975.
\+ ==> *

mutant:
			nCurrSubSet*+;


1976.
\+ ==> *

mutant:
			nCurrSubSet+*;


1977.
\+ ==> /

mutant:
			nCurrSubSet/+;


1978.
\+ ==> /

mutant:
			nCurrSubSet+/;


1979.
\+ ==> %

mutant:
			nCurrSubSet%+;


1980.
\+ ==> %

mutant:
			nCurrSubSet+%;


1981.
\+\+ ==> --

mutant:
			nCurrSubSet--;


1982.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			nCurrSubSet++;
			break;


1983.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			nCurrSubSet++;
			continue;


1984.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*nCurrSubSet++;*/


1985.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


1986.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


1987.
\+ ==> -

mutant:
		lineno-+;


1988.
\+ ==> -

mutant:
		lineno+-;


1989.
\+ ==> *

mutant:
		lineno*+;


1990.
\+ ==> *

mutant:
		lineno+*;


1991.
\+ ==> /

mutant:
		lineno/+;


1992.
\+ ==> /

mutant:
		lineno+/;


1993.
\+ ==> %

mutant:
		lineno%+;


1994.
\+ ==> %

mutant:
		lineno+%;


1995.
\+\+ ==> --

mutant:
		lineno--;


1996.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		lineno++;
		break;


1997.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		lineno++;
		continue;


1998.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*lineno++;*/


1999.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	}
	break;


2000.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	}
	continue;


2001.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	return 1;


2002.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	return -1;


2003.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	return (0+1);


2004.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	return (0-1);


2005.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	return 0;
	break;


2006.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	return 0;
	continue;


2007.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*return 0;*/


2008.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


2009.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


2010.
\* ==> +

mutant:
int init_args(int argc, char +*argv) {


2011.
\* ==> +

mutant:
int init_args(int argc, char *+argv) {


2012.
\* ==> -

mutant:
int init_args(int argc, char -*argv) {


2013.
\* ==> -

mutant:
int init_args(int argc, char *-argv) {


2014.
\* ==> /

mutant:
int init_args(int argc, char /*argv) {


2015.
\* ==> /

mutant:
int init_args(int argc, char */argv) {


2016.
\* ==> %

mutant:
int init_args(int argc, char %*argv) {


2017.
\* ==> %

mutant:
int init_args(int argc, char *%argv) {


2018.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
int init_args(int argc, char **argv) {
break;


2019.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
int init_args(int argc, char **argv) {
continue;


2020.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
int init_args( char **argv,int argc) {


2021.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
/*int init_args(int argc, char **argv) {*/


2022.
\* ==> +

mutant:
	char str[1024], +opts[] = { "-f" }; /* valid options */


2023.
\* ==> +

mutant:
	char str[1024], *opts[] = { "-f" }; /+ valid options */


2024.
\* ==> +

mutant:
	char str[1024], *opts[] = { "-f" }; /* valid options +/


2025.
\* ==> -

mutant:
	char str[1024], -opts[] = { "-f" }; /* valid options */


2026.
\* ==> -

mutant:
	char str[1024], *opts[] = { "-f" }; /- valid options */


2027.
\* ==> -

mutant:
	char str[1024], *opts[] = { "-f" }; /* valid options -/


2028.
\* ==> /

mutant:
	char str[1024], /opts[] = { "-f" }; /* valid options */


2029.
\* ==> /

mutant:
	char str[1024], *opts[] = { "-f" }; // valid options */


2030.
\* ==> /

mutant:
	char str[1024], *opts[] = { "-f" }; /* valid options //


2031.
\* ==> %

mutant:
	char str[1024], %opts[] = { "-f" }; /* valid options */


2032.
\* ==> %

mutant:
	char str[1024], *opts[] = { "-f" }; /% valid options */


2033.
\* ==> %

mutant:
	char str[1024], *opts[] = { "-f" }; /* valid options %/


2034.
-([^>]) ==> \1

mutant:
	char str[1024], *opts[] = { "f" }; /* valid options */


2035.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
	char str[0], *opts[] = { "-f" }; /* valid options */


2036.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	char str[1], *opts[] = { "-f" }; /* valid options */


2037.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	char str[-1], *opts[] = { "-f" }; /* valid options */


2038.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	char str[(1024+1)], *opts[] = { "-f" }; /* valid options */


2039.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	char str[(1024-1)], *opts[] = { "-f" }; /* valid options */


2040.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	char str[1024], *opts[] = { "-f" }; /* valid options */
	break;


2041.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	char str[1024], *opts[] = { "-f" }; /* valid options */
	continue;


2042.
".+" ==> ""

mutant:
	char str[1024], *opts[] = { "" }; /* valid options */


2043.
\[([^,]+),([^,\]]+) ==> [\2,\1

mutant:
	char str[ *opts[,1024]] = { "-f" }; /* valid options */


2044.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*char str[1024], *opts[] = { "-f" }; /* valid options */*/


2045.
\* ==> +

mutant:
	int valopts[] = { 1 }; /+ indicates options with values */


2046.
\* ==> +

mutant:
	int valopts[] = { 1 }; /* indicates options with values +/


2047.
\* ==> -

mutant:
	int valopts[] = { 1 }; /- indicates options with values */


2048.
\* ==> -

mutant:
	int valopts[] = { 1 }; /* indicates options with values -/


2049.
\* ==> /

mutant:
	int valopts[] = { 1 }; // indicates options with values */


2050.
\* ==> /

mutant:
	int valopts[] = { 1 }; /* indicates options with values //


2051.
\* ==> %

mutant:
	int valopts[] = { 1 }; /% indicates options with values */


2052.
\* ==> %

mutant:
	int valopts[] = { 1 }; /* indicates options with values %/


2053.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
	int valopts[] = { 0 }; /* indicates options with values */


2054.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	int valopts[] = { -1 }; /* indicates options with values */


2055.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	int valopts[] = { (1+1) }; /* indicates options with values */


2056.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	int valopts[] = { (1-1) }; /* indicates options with values */


2057.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int valopts[] = { 1 }; /* indicates options with values */
	break;


2058.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int valopts[] = { 1 }; /* indicates options with values */
	continue;


2059.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int valopts[] = { 1 }; /* indicates options with values */*/


2060.
-([^>]) ==> +\1

mutant:
	/* 0=none, 1=required, +1=optional */


2061.
-([^>]) ==> *\1

mutant:
	/* 0=none, 1=required, *1=optional */


2062.
-([^>]) ==> /\1

mutant:
	/* 0=none, 1=required, /1=optional */


2063.
-([^>]) ==> %\1

mutant:
	/* 0=none, 1=required, %1=optional */


2064.
\* ==> +

mutant:
	/+ 0=none, 1=required, -1=optional */


2065.
\* ==> +

mutant:
	/* 0=none, 1=required, -1=optional +/


2066.
\* ==> -

mutant:
	/- 0=none, 1=required, -1=optional */


2067.
\* ==> -

mutant:
	/* 0=none, 1=required, -1=optional -/


2068.
\* ==> /

mutant:
	// 0=none, 1=required, -1=optional */


2069.
\* ==> /

mutant:
	/* 0=none, 1=required, -1=optional //


2070.
\* ==> %

mutant:
	/% 0=none, 1=required, -1=optional */


2071.
\* ==> %

mutant:
	/* 0=none, 1=required, -1=optional %/


2072.
-([^>]) ==> \1

mutant:
	/* 0=none, 1=required, 1=optional */


2073.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
	/* 0=none, 0=required, -1=optional */


2074.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
	/* 0=none, 1=required, -0=optional */


2075.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	/* 1=none, 1=required, -1=optional */


2076.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	/* -1=none, 1=required, -1=optional */


2077.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	/* 0=none, -1=required, -1=optional */


2078.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	/* 0=none, 1=required, --1=optional */


2079.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	/* (0+1)=none, 1=required, -1=optional */


2080.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	/* 0=none, (1+1)=required, -1=optional */


2081.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	/* 0=none, 1=required, -(1+1)=optional */


2082.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	/* (0-1)=none, 1=required, -1=optional */


2083.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	/* 0=none, (1-1)=required, -1=optional */


2084.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	/* 0=none, 1=required, -(1-1)=optional */


2085.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	/* 0=none, 1=required, -1=optional */
	break;


2086.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	/* 0=none, 1=required, -1=optional */
	continue;


2087.
,([^,]+),([^,\)\]]+) ==> ,\2,\1

mutant:
	/* 0=none, -1=optional */
, 1=required


2088.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*/* 0=none, 1=required, -1=optional */*/


2089.
\* ==> +

mutant:
	int i, /+ looper through all cmdline arguments */


2090.
\* ==> +

mutant:
	int i, /* looper through all cmdline arguments +/


2091.
\* ==> -

mutant:
	int i, /- looper through all cmdline arguments */


2092.
\* ==> -

mutant:
	int i, /* looper through all cmdline arguments -/


2093.
\* ==> /

mutant:
	int i, // looper through all cmdline arguments */


2094.
\* ==> /

mutant:
	int i, /* looper through all cmdline arguments //


2095.
\* ==> %

mutant:
	int i, /% looper through all cmdline arguments */


2096.
\* ==> %

mutant:
	int i, /* looper through all cmdline arguments %/


2097.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	int i, /* looper through all cmdline arguments */
	break;


2098.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	int i, /* looper through all cmdline arguments */
	continue;


2099.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*int i, /* looper through all cmdline arguments */*/


2100.
-([^>]) ==> +\1

mutant:
	a, /* current valid argument+value position */


2101.
-([^>]) ==> *\1

mutant:
	a, /* current valid argument*value position */


2102.
-([^>]) ==> /\1

mutant:
	a, /* current valid argument/value position */


2103.
-([^>]) ==> %\1

mutant:
	a, /* current valid argument%value position */


2104.
\* ==> +

mutant:
	a, /+ current valid argument-value position */


2105.
\* ==> +

mutant:
	a, /* current valid argument-value position +/


2106.
\* ==> -

mutant:
	a, /- current valid argument-value position */


2107.
\* ==> -

mutant:
	a, /* current valid argument-value position -/


2108.
\* ==> /

mutant:
	a, // current valid argument-value position */


2109.
\* ==> /

mutant:
	a, /* current valid argument-value position //


2110.
\* ==> %

mutant:
	a, /% current valid argument-value position */


2111.
\* ==> %

mutant:
	a, /* current valid argument-value position %/


2112.
-([^>]) ==> \1

mutant:
	a, /* current valid argumentvalue position */


2113.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	a, /* current valid argument-value position */
	break;


2114.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	a, /* current valid argument-value position */
	continue;


2115.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*a, /* current valid argument-value position */*/


2116.
\* ==> +

mutant:
	op, /+ position number of found option */


2117.
\* ==> +

mutant:
	op, /* position number of found option +/


2118.
\* ==> -

mutant:
	op, /- position number of found option */


2119.
\* ==> -

mutant:
	op, /* position number of found option -/


2120.
\* ==> /

mutant:
	op, // position number of found option */


2121.
\* ==> /

mutant:
	op, /* position number of found option //


2122.
\* ==> %

mutant:
	op, /% position number of found option */


2123.
\* ==> %

mutant:
	op, /* position number of found option %/


2124.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	op, /* position number of found option */
	break;


2125.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	op, /* position number of found option */
	continue;


2126.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*op, /* position number of found option */*/


2127.
\* ==> +

mutant:
	nopts = sizeof(opts) / sizeof(char +);


2128.
\* ==> -

mutant:
	nopts = sizeof(opts) / sizeof(char -);


2129.
\* ==> /

mutant:
	nopts = sizeof(opts) / sizeof(char /);


2130.
\* ==> %

mutant:
	nopts = sizeof(opts) / sizeof(char %);


2131.
([^\*/])/([^\*/]) ==> \1+\2

mutant:
	nopts = sizeof(opts) + sizeof(char *);


2132.
([^\*/])/([^\*/]) ==> \1-\2

mutant:
	nopts = sizeof(opts) - sizeof(char *);


2133.
([^\*/])/([^\*/]) ==> \1*\2

mutant:
	nopts = sizeof(opts) * sizeof(char *);


2134.
([^\*/])/([^\*/]) ==> \1%\2

mutant:
	nopts = sizeof(opts) % sizeof(char *);


2135.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	nopts = sizeof(opts) / sizeof(char *);
	break;


2136.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	nopts = sizeof(opts) / sizeof(char *);
	continue;


2137.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*nopts = sizeof(opts) / sizeof(char *);*/


2138.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
	a = 0;


2139.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	a = -1;


2140.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	a = (1+1);


2141.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	a = (1-1);


2142.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	a = 1;
	break;


2143.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	a = 1;
	continue;


2144.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*a = 1;*/


2145.
\+ ==> -

mutant:
	for (i = 1; i <= nopts; i-+) {


2146.
\+ ==> -

mutant:
	for (i = 1; i <= nopts; i+-) {


2147.
\+ ==> *

mutant:
	for (i = 1; i <= nopts; i*+) {


2148.
\+ ==> *

mutant:
	for (i = 1; i <= nopts; i+*) {


2149.
\+ ==> /

mutant:
	for (i = 1; i <= nopts; i/+) {


2150.
\+ ==> /

mutant:
	for (i = 1; i <= nopts; i+/) {


2151.
\+ ==> %

mutant:
	for (i = 1; i <= nopts; i%+) {


2152.
\+ ==> %

mutant:
	for (i = 1; i <= nopts; i+%) {


2153.
<= ==> ==

mutant:
	for (i = 1; i == nopts; i++) {


2154.
<= ==> !=

mutant:
	for (i = 1; i != nopts; i++) {


2155.
<= ==> <

mutant:
	for (i = 1; i < nopts; i++) {


2156.
<= ==> >

mutant:
	for (i = 1; i > nopts; i++) {


2157.
< ==> >

mutant:
	for (i = 1; i >= nopts; i++) {


2158.
< ==> ==

mutant:
	for (i = 1; i === nopts; i++) {


2159.
< ==> <=

mutant:
	for (i = 1; i <== nopts; i++) {


2160.
< ==> >=

mutant:
	for (i = 1; i >== nopts; i++) {


2161.
< ==> !=

mutant:
	for (i = 1; i !== nopts; i++) {


2162.
\+\+ ==> --

mutant:
	for (i = 1; i <= nopts; i--) {


2163.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
	for (i = 0; i <= nopts; i++) {


2164.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	for (i = -1; i <= nopts; i++) {


2165.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	for (i = (1+1); i <= nopts; i++) {


2166.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	for (i = (1-1); i <= nopts; i++) {


2167.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	for (i = 1; i <= nopts; i++) {
	break;


2168.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	for (i = 1; i <= nopts; i++) {
	continue;


2169.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*for (i = 1; i <= nopts; i++) {*/


2170.
>= ==> ==

mutant:
		if (a == argc)


2171.
>= ==> !=

mutant:
		if (a != argc)


2172.
>= ==> <

mutant:
		if (a < argc)


2173.
>= ==> >

mutant:
		if (a > argc)


2174.
([^-])> ==> \1<

mutant:
		if (a <= argc)


2175.
([^-])> ==> \1==

mutant:
		if (a === argc)


2176.
([^-])> ==> \1>=

mutant:
		if (a >== argc)


2177.
([^-])> ==> \1<=

mutant:
		if (a <== argc)


2178.
([^-])> ==> \1!=

mutant:
		if (a !== argc)


2179.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		if (a >= argc)
		break;


2180.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		if (a >= argc)
		continue;


2181.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*if (a >= argc)*/


2182.
if (\(.*\)) ==> if (!\1)

mutant:
		if (!(a >= argc))


2183.
if (\(.*\)) ==> if (0==1)

mutant:
		if (0==1)


2184.
if (\(.*\)) ==> if (1==1)

mutant:
		if (1==1)


2185.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			break;
			break;


2186.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			break;
			continue;


2187.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*break;*/


2188.
-([^>]) ==> +\1

mutant:
		/* figure out which option by its position 0+(nopts-1) */


2189.
-([^>]) ==> +\1

mutant:
		/* figure out which option by its position 0-(nopts+1) */


2190.
-([^>]) ==> *\1

mutant:
		/* figure out which option by its position 0*(nopts-1) */


2191.
-([^>]) ==> *\1

mutant:
		/* figure out which option by its position 0-(nopts*1) */


2192.
-([^>]) ==> /\1

mutant:
		/* figure out which option by its position 0/(nopts-1) */


2193.
-([^>]) ==> /\1

mutant:
		/* figure out which option by its position 0-(nopts/1) */


2194.
-([^>]) ==> %\1

mutant:
		/* figure out which option by its position 0%(nopts-1) */


2195.
-([^>]) ==> %\1

mutant:
		/* figure out which option by its position 0-(nopts%1) */


2196.
\* ==> +

mutant:
		/+ figure out which option by its position 0-(nopts-1) */


2197.
\* ==> +

mutant:
		/* figure out which option by its position 0-(nopts-1) +/


2198.
\* ==> -

mutant:
		/- figure out which option by its position 0-(nopts-1) */


2199.
\* ==> -

mutant:
		/* figure out which option by its position 0-(nopts-1) -/


2200.
\* ==> /

mutant:
		// figure out which option by its position 0-(nopts-1) */


2201.
\* ==> /

mutant:
		/* figure out which option by its position 0-(nopts-1) //


2202.
\* ==> %

mutant:
		/% figure out which option by its position 0-(nopts-1) */


2203.
\* ==> %

mutant:
		/* figure out which option by its position 0-(nopts-1) %/


2204.
-([^>]) ==> \1

mutant:
		/* figure out which option by its position 0(nopts-1) */


2205.
-([^>]) ==> \1

mutant:
		/* figure out which option by its position 0-(nopts1) */


2206.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
		/* figure out which option by its position 0-(nopts-0) */


2207.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		/* figure out which option by its position 1-(nopts-1) */


2208.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		/* figure out which option by its position -1-(nopts-1) */


2209.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		/* figure out which option by its position 0-(nopts--1) */


2210.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		/* figure out which option by its position (0+1)-(nopts-1) */


2211.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		/* figure out which option by its position 0-(nopts-(1+1)) */


2212.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		/* figure out which option by its position (0-1)-(nopts-1) */


2213.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		/* figure out which option by its position 0-(nopts-(1-1)) */


2214.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		/* figure out which option by its position 0-(nopts-1) */
		break;


2215.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		/* figure out which option by its position 0-(nopts-1) */
		continue;


2216.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*/* figure out which option by its position 0-(nopts-1) */*/


2217.
\+ ==> -

mutant:
		for (op = 0; op < nopts; op-+) {


2218.
\+ ==> -

mutant:
		for (op = 0; op < nopts; op+-) {


2219.
\+ ==> *

mutant:
		for (op = 0; op < nopts; op*+) {


2220.
\+ ==> *

mutant:
		for (op = 0; op < nopts; op+*) {


2221.
\+ ==> /

mutant:
		for (op = 0; op < nopts; op/+) {


2222.
\+ ==> /

mutant:
		for (op = 0; op < nopts; op+/) {


2223.
\+ ==> %

mutant:
		for (op = 0; op < nopts; op%+) {


2224.
\+ ==> %

mutant:
		for (op = 0; op < nopts; op+%) {


2225.
< ==> >

mutant:
		for (op = 0; op > nopts; op++) {


2226.
< ==> ==

mutant:
		for (op = 0; op == nopts; op++) {


2227.
< ==> <=

mutant:
		for (op = 0; op <= nopts; op++) {


2228.
< ==> >=

mutant:
		for (op = 0; op >= nopts; op++) {


2229.
< ==> !=

mutant:
		for (op = 0; op != nopts; op++) {


2230.
\+\+ ==> --

mutant:
		for (op = 0; op < nopts; op--) {


2231.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		for (op = 1; op < nopts; op++) {


2232.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		for (op = -1; op < nopts; op++) {


2233.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		for (op = (0+1); op < nopts; op++) {


2234.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		for (op = (0-1); op < nopts; op++) {


2235.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		for (op = 0; op < nopts; op++) {
		break;


2236.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		for (op = 0; op < nopts; op++) {
		continue;


2237.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*for (op = 0; op < nopts; op++) {*/


2238.
== ==> !=

mutant:
			if (strncmp(opts[op], argv[a], 2) != 0) {


2239.
== ==> <=

mutant:
			if (strncmp(opts[op], argv[a], 2) <= 0) {


2240.
== ==> >=

mutant:
			if (strncmp(opts[op], argv[a], 2) >= 0) {


2241.
== ==> >

mutant:
			if (strncmp(opts[op], argv[a], 2) > 0) {


2242.
== ==> <

mutant:
			if (strncmp(opts[op], argv[a], 2) < 0) {


2243.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
			if (strncmp(opts[op], argv[a], 0) == 0) {


2244.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
			if (strncmp(opts[op], argv[a], 1) == 0) {


2245.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
			if (strncmp(opts[op], argv[a], 2) == 1) {


2246.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			if (strncmp(opts[op], argv[a], -1) == 0) {


2247.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			if (strncmp(opts[op], argv[a], 2) == -1) {


2248.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			if (strncmp(opts[op], argv[a], (2+1)) == 0) {


2249.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			if (strncmp(opts[op], argv[a], 2) == (0+1)) {


2250.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			if (strncmp(opts[op], argv[a], (2-1)) == 0) {


2251.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			if (strncmp(opts[op], argv[a], 2) == (0-1)) {


2252.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			if (strncmp(opts[op], argv[a], 2) == 0) {
			break;


2253.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			if (strncmp(opts[op], argv[a], 2) == 0) {
			continue;


2254.
,([^,]+),([^,\)\]]+) ==> ,\2,\1

mutant:
			if (strncmp(opts[op], 2, argv[a]) == 0) {


2255.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			if ( argv[a],strncmp(opts[op], 2) == 0) {


2256.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			if (strncmp( argv[a],opts[op], 2) == 0) {


2257.
\[([^,]+),([^,\]]+) ==> [\2,\1

mutant:
			if (strncmp(opts[ argv[a,op]], 2) == 0) {


2258.
\[([^,]+),([^,\]]+) ==> [\2,\1

mutant:
			if (strncmp(opts[op], argv[ 2) == 0) {
,a]


2259.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*if (strncmp(opts[op], argv[a], 2) == 0) {*/


2260.
if (\(.*\)) ==> if (!\1)

mutant:
			if (!(strncmp(opts[op], argv[a], 2) == 0)) {


2261.
if (\(.*\)) ==> if (0==1)

mutant:
			if (0==1) {


2262.
if (\(.*\)) ==> if (1==1)

mutant:
			if (1==1) {


2263.
\* ==> +

mutant:
				break; /+ found it, move on */


2264.
\* ==> +

mutant:
				break; /* found it, move on +/


2265.
\* ==> -

mutant:
				break; /- found it, move on */


2266.
\* ==> -

mutant:
				break; /* found it, move on -/


2267.
\* ==> /

mutant:
				break; // found it, move on */


2268.
\* ==> /

mutant:
				break; /* found it, move on //


2269.
\* ==> %

mutant:
				break; /% found it, move on */


2270.
\* ==> %

mutant:
				break; /* found it, move on %/


2271.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				break; /* found it, move on */
				break;


2272.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				break; /* found it, move on */
				continue;


2273.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*break; /* found it, move on */*/


2274.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			}
			break;


2275.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			}
			continue;


2276.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


2277.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


2278.
== ==> !=

mutant:
		if (op != nopts) {


2279.
== ==> <=

mutant:
		if (op <= nopts) {


2280.
== ==> >=

mutant:
		if (op >= nopts) {


2281.
== ==> >

mutant:
		if (op > nopts) {


2282.
== ==> <

mutant:
		if (op < nopts) {


2283.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		if (op == nopts) {
		break;


2284.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		if (op == nopts) {
		continue;


2285.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*if (op == nopts) {*/


2286.
if (\(.*\)) ==> if (!\1)

mutant:
		if (!(op == nopts)) {


2287.
if (\(.*\)) ==> if (0==1)

mutant:
		if (0==1) {


2288.
if (\(.*\)) ==> if (1==1)

mutant:
		if (1==1) {


2289.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			fprintf(stderr, "Invalid option %s\n", argv[a]);
			break;


2290.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			fprintf(stderr, "Invalid option %s\n", argv[a]);
			continue;


2291.
".+" ==> ""

mutant:
			fprintf(stderr, "", argv[a]);


2292.
,([^,]+),([^,\)\]]+) ==> ,\2,\1

mutant:
			fprintf(stderr, argv[a, "Invalid option %s\n"]);


2293.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			fprintf( "Invalid option %s\n",stderr, argv[a]);


2294.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*fprintf(stderr, "Invalid option %s\n", argv[a]);*/


2295.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			printf("%s\n", "Pancake requires an input file. Use -f filename.txt");
			break;


2296.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			printf("%s\n", "Pancake requires an input file. Use -f filename.txt");
			continue;


2297.
".+" ==> ""

mutant:
			printf("");


2298.
".+" ==> ""

mutant:
			printf("%s\n"");


2299.
".+" ==> ""

mutant:
			printf("%s\n", "");


2300.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			printf( "Pancake requires an input file. Use -f filename.txt","%s\n");


2301.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*printf("%s\n", "Pancake requires an input file. Use -f filename.txt");*/


2302.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
			return 0;


2303.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			return -1;


2304.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			return (1+1);


2305.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			return (1-1);


2306.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			return 1;
			break;


2307.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			return 1;
			continue;


2308.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*return 1;*/


2309.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


2310.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


2311.
\* ==> +

mutant:
		+str = '\0';


2312.
\* ==> -

mutant:
		-str = '\0';


2313.
\* ==> /

mutant:
		/str = '\0';


2314.
\* ==> %

mutant:
		%str = '\0';


2315.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		*str = '\1';


2316.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		*str = '\-1';


2317.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		*str = '\(0+1)';


2318.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		*str = '\(0-1)';


2319.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		*str = '\0';
		break;


2320.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		*str = '\0';
		continue;


2321.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/**str = '\0';*/


2322.
-([^>]) ==> +\1

mutant:
		/* extract value part of option+value pair */


2323.
-([^>]) ==> *\1

mutant:
		/* extract value part of option*value pair */


2324.
-([^>]) ==> /\1

mutant:
		/* extract value part of option/value pair */


2325.
-([^>]) ==> %\1

mutant:
		/* extract value part of option%value pair */


2326.
\* ==> +

mutant:
		/+ extract value part of option-value pair */


2327.
\* ==> +

mutant:
		/* extract value part of option-value pair +/


2328.
\* ==> -

mutant:
		/- extract value part of option-value pair */


2329.
\* ==> -

mutant:
		/* extract value part of option-value pair -/


2330.
\* ==> /

mutant:
		// extract value part of option-value pair */


2331.
\* ==> /

mutant:
		/* extract value part of option-value pair //


2332.
\* ==> %

mutant:
		/% extract value part of option-value pair */


2333.
\* ==> %

mutant:
		/* extract value part of option-value pair %/


2334.
-([^>]) ==> \1

mutant:
		/* extract value part of optionvalue pair */


2335.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		/* extract value part of option-value pair */
		break;


2336.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		/* extract value part of option-value pair */
		continue;


2337.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*/* extract value part of option-value pair */*/


2338.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		if (valopts[op]) {
		break;


2339.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		if (valopts[op]) {
		continue;


2340.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*if (valopts[op]) {*/


2341.
if (\(.*\)) ==> if (!\1)

mutant:
		if (!(valopts[op])) {


2342.
if (\(.*\)) ==> if (0==1)

mutant:
		if (0==1) {


2343.
if (\(.*\)) ==> if (1==1)

mutant:
		if (1==1) {


2344.
-([^>]) ==> +\1

mutant:
			if ('\0' != argv[a][2]) { /* no space betw opt+value */


2345.
-([^>]) ==> *\1

mutant:
			if ('\0' != argv[a][2]) { /* no space betw opt*value */


2346.
-([^>]) ==> /\1

mutant:
			if ('\0' != argv[a][2]) { /* no space betw opt/value */


2347.
-([^>]) ==> %\1

mutant:
			if ('\0' != argv[a][2]) { /* no space betw opt%value */


2348.
\* ==> +

mutant:
			if ('\0' != argv[a][2]) { /+ no space betw opt-value */


2349.
\* ==> +

mutant:
			if ('\0' != argv[a][2]) { /* no space betw opt-value +/


2350.
\* ==> -

mutant:
			if ('\0' != argv[a][2]) { /- no space betw opt-value */


2351.
\* ==> -

mutant:
			if ('\0' != argv[a][2]) { /* no space betw opt-value -/


2352.
\* ==> /

mutant:
			if ('\0' != argv[a][2]) { // no space betw opt-value */


2353.
\* ==> /

mutant:
			if ('\0' != argv[a][2]) { /* no space betw opt-value //


2354.
\* ==> %

mutant:
			if ('\0' != argv[a][2]) { /% no space betw opt-value */


2355.
\* ==> %

mutant:
			if ('\0' != argv[a][2]) { /* no space betw opt-value %/


2356.
!= ==> ==

mutant:
			if ('\0' == argv[a][2]) { /* no space betw opt-value */


2357.
!= ==> <=

mutant:
			if ('\0' <= argv[a][2]) { /* no space betw opt-value */


2358.
!= ==> >=

mutant:
			if ('\0' >= argv[a][2]) { /* no space betw opt-value */


2359.
!= ==> >

mutant:
			if ('\0' > argv[a][2]) { /* no space betw opt-value */


2360.
!= ==> <

mutant:
			if ('\0' < argv[a][2]) { /* no space betw opt-value */


2361.
-([^>]) ==> \1

mutant:
			if ('\0' != argv[a][2]) { /* no space betw optvalue */


2362.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
			if ('\0' != argv[a][0]) { /* no space betw opt-value */


2363.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
			if ('\1' != argv[a][2]) { /* no space betw opt-value */


2364.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
			if ('\0' != argv[a][1]) { /* no space betw opt-value */


2365.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			if ('\-1' != argv[a][2]) { /* no space betw opt-value */


2366.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			if ('\0' != argv[a][-1]) { /* no space betw opt-value */


2367.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			if ('\(0+1)' != argv[a][2]) { /* no space betw opt-value */


2368.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			if ('\0' != argv[a][(2+1)]) { /* no space betw opt-value */


2369.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			if ('\(0-1)' != argv[a][2]) { /* no space betw opt-value */


2370.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			if ('\0' != argv[a][(2-1)]) { /* no space betw opt-value */


2371.
! ==>

mutant:
			if ('\0' = argv[a][2]) { /* no space betw opt-value */


2372.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			if ('\0' != argv[a][2]) { /* no space betw opt-value */
			break;


2373.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			if ('\0' != argv[a][2]) { /* no space betw opt-value */
			continue;


2374.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*if ('\0' != argv[a][2]) { /* no space betw opt-value */*/


2375.
if (\(.*\)) ==> if (!\1)

mutant:
			if (!('\0' != argv[a][2])) { /* no space betw opt-value */


2376.
if (\(.*\)) ==> if (0==1)

mutant:
			if (0==1) { /* no space betw opt-value */


2377.
if (\(.*\)) ==> if (1==1)

mutant:
			if (1==1) { /* no space betw opt-value */


2378.
\+ ==> -

mutant:
				strcpy(str, (argv[a] - 2));


2379.
\+ ==> *

mutant:
				strcpy(str, (argv[a] * 2));


2380.
\+ ==> /

mutant:
				strcpy(str, (argv[a] / 2));


2381.
\+ ==> %

mutant:
				strcpy(str, (argv[a] % 2));


2382.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
				strcpy(str, (argv[a] + 0));


2383.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
				strcpy(str, (argv[a] + 1));


2384.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
				strcpy(str, (argv[a] + -1));


2385.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
				strcpy(str, (argv[a] + (2+1)));


2386.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
				strcpy(str, (argv[a] + (2-1)));


2387.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				strcpy(str, (argv[a] + 2));
				break;


2388.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				strcpy(str, (argv[a] + 2));
				continue;


2389.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
				strcpy( (argv[a] + 2,str));


2390.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*strcpy(str, (argv[a] + 2));*/


2391.
\+ ==> -

mutant:
			} else if ('-' != *argv[a - 1]) { /* space betw opt-value */


2392.
\+ ==> *

mutant:
			} else if ('-' != *argv[a * 1]) { /* space betw opt-value */


2393.
\+ ==> /

mutant:
			} else if ('-' != *argv[a / 1]) { /* space betw opt-value */


2394.
\+ ==> %

mutant:
			} else if ('-' != *argv[a % 1]) { /* space betw opt-value */


2395.
-([^>]) ==> +\1

mutant:
			} else if ('+' != *argv[a + 1]) { /* space betw opt-value */


2396.
-([^>]) ==> +\1

mutant:
			} else if ('-' != *argv[a + 1]) { /* space betw opt+value */


2397.
-([^>]) ==> *\1

mutant:
			} else if ('*' != *argv[a + 1]) { /* space betw opt-value */


2398.
-([^>]) ==> *\1

mutant:
			} else if ('-' != *argv[a + 1]) { /* space betw opt*value */


2399.
-([^>]) ==> /\1

mutant:
			} else if ('/' != *argv[a + 1]) { /* space betw opt-value */


2400.
-([^>]) ==> /\1

mutant:
			} else if ('-' != *argv[a + 1]) { /* space betw opt/value */


2401.
-([^>]) ==> %\1

mutant:
			} else if ('%' != *argv[a + 1]) { /* space betw opt-value */


2402.
-([^>]) ==> %\1

mutant:
			} else if ('-' != *argv[a + 1]) { /* space betw opt%value */


2403.
\* ==> +

mutant:
			} else if ('-' != +argv[a + 1]) { /* space betw opt-value */


2404.
\* ==> +

mutant:
			} else if ('-' != *argv[a + 1]) { /+ space betw opt-value */


2405.
\* ==> +

mutant:
			} else if ('-' != *argv[a + 1]) { /* space betw opt-value +/


2406.
\* ==> -

mutant:
			} else if ('-' != -argv[a + 1]) { /* space betw opt-value */


2407.
\* ==> -

mutant:
			} else if ('-' != *argv[a + 1]) { /- space betw opt-value */


2408.
\* ==> -

mutant:
			} else if ('-' != *argv[a + 1]) { /* space betw opt-value -/


2409.
\* ==> /

mutant:
			} else if ('-' != /argv[a + 1]) { /* space betw opt-value */


2410.
\* ==> /

mutant:
			} else if ('-' != *argv[a + 1]) { // space betw opt-value */


2411.
\* ==> /

mutant:
			} else if ('-' != *argv[a + 1]) { /* space betw opt-value //


2412.
\* ==> %

mutant:
			} else if ('-' != %argv[a + 1]) { /* space betw opt-value */


2413.
\* ==> %

mutant:
			} else if ('-' != *argv[a + 1]) { /% space betw opt-value */


2414.
\* ==> %

mutant:
			} else if ('-' != *argv[a + 1]) { /* space betw opt-value %/


2415.
!= ==> ==

mutant:
			} else if ('-' == *argv[a + 1]) { /* space betw opt-value */


2416.
!= ==> <=

mutant:
			} else if ('-' <= *argv[a + 1]) { /* space betw opt-value */


2417.
!= ==> >=

mutant:
			} else if ('-' >= *argv[a + 1]) { /* space betw opt-value */


2418.
!= ==> >

mutant:
			} else if ('-' > *argv[a + 1]) { /* space betw opt-value */


2419.
!= ==> <

mutant:
			} else if ('-' < *argv[a + 1]) { /* space betw opt-value */


2420.
-([^>]) ==> \1

mutant:
			} else if ('' != *argv[a + 1]) { /* space betw opt-value */


2421.
-([^>]) ==> \1

mutant:
			} else if ('-' != *argv[a + 1]) { /* space betw optvalue */


2422.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
			} else if ('-' != *argv[a + 0]) { /* space betw opt-value */


2423.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			} else if ('-' != *argv[a + -1]) { /* space betw opt-value */


2424.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			} else if ('-' != *argv[a + (1+1)]) { /* space betw opt-value */


2425.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			} else if ('-' != *argv[a + (1-1)]) { /* space betw opt-value */


2426.
! ==>

mutant:
			} else if ('-' = *argv[a + 1]) { /* space betw opt-value */


2427.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			} else if ('-' != *argv[a + 1]) { /* space betw opt-value */
			break;


2428.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			} else if ('-' != *argv[a + 1]) { /* space betw opt-value */
			continue;


2429.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*} else if ('-' != *argv[a + 1]) { /* space betw opt-value */*/


2430.
if (\(.*\)) ==> if (!\1)

mutant:
			} else if (!('-' != *argv[a + 1])) { /* space betw opt-value */


2431.
if (\(.*\)) ==> if (0==1)

mutant:
			} else if (0==1) { /* space betw opt-value */


2432.
if (\(.*\)) ==> if (1==1)

mutant:
			} else if (1==1) { /* space betw opt-value */


2433.
else ==> 

mutant:
			}  if ('-' != *argv[a + 1]) { /* space betw opt-value */


2434.
\+ ==> -

mutant:
				strcpy(str, argv[-+a]);


2435.
\+ ==> -

mutant:
				strcpy(str, argv[+-a]);


2436.
\+ ==> *

mutant:
				strcpy(str, argv[*+a]);


2437.
\+ ==> *

mutant:
				strcpy(str, argv[+*a]);


2438.
\+ ==> /

mutant:
				strcpy(str, argv[/+a]);


2439.
\+ ==> /

mutant:
				strcpy(str, argv[+/a]);


2440.
\+ ==> %

mutant:
				strcpy(str, argv[%+a]);


2441.
\+ ==> %

mutant:
				strcpy(str, argv[+%a]);


2442.
\+\+ ==> --

mutant:
				strcpy(str, argv[--a]);


2443.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				strcpy(str, argv[++a]);
				break;


2444.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				strcpy(str, argv[++a]);
				continue;


2445.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
				strcpy( argv[++a],str);


2446.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*strcpy(str, argv[++a]);*/


2447.
-([^>]) ==> +\1

mutant:
			} else if (0 < valopts[op]) { /* required opt+val not found */


2448.
-([^>]) ==> *\1

mutant:
			} else if (0 < valopts[op]) { /* required opt*val not found */


2449.
-([^>]) ==> /\1

mutant:
			} else if (0 < valopts[op]) { /* required opt/val not found */


2450.
-([^>]) ==> %\1

mutant:
			} else if (0 < valopts[op]) { /* required opt%val not found */


2451.
\* ==> +

mutant:
			} else if (0 < valopts[op]) { /+ required opt-val not found */


2452.
\* ==> +

mutant:
			} else if (0 < valopts[op]) { /* required opt-val not found +/


2453.
\* ==> -

mutant:
			} else if (0 < valopts[op]) { /- required opt-val not found */


2454.
\* ==> -

mutant:
			} else if (0 < valopts[op]) { /* required opt-val not found -/


2455.
\* ==> /

mutant:
			} else if (0 < valopts[op]) { // required opt-val not found */


2456.
\* ==> /

mutant:
			} else if (0 < valopts[op]) { /* required opt-val not found //


2457.
\* ==> %

mutant:
			} else if (0 < valopts[op]) { /% required opt-val not found */


2458.
\* ==> %

mutant:
			} else if (0 < valopts[op]) { /* required opt-val not found %/


2459.
< ==> >

mutant:
			} else if (0 > valopts[op]) { /* required opt-val not found */


2460.
< ==> ==

mutant:
			} else if (0 == valopts[op]) { /* required opt-val not found */


2461.
< ==> <=

mutant:
			} else if (0 <= valopts[op]) { /* required opt-val not found */


2462.
< ==> >=

mutant:
			} else if (0 >= valopts[op]) { /* required opt-val not found */


2463.
< ==> !=

mutant:
			} else if (0 != valopts[op]) { /* required opt-val not found */


2464.
-([^>]) ==> \1

mutant:
			} else if (0 < valopts[op]) { /* required optval not found */


2465.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
			} else if (1 < valopts[op]) { /* required opt-val not found */


2466.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
			} else if (-1 < valopts[op]) { /* required opt-val not found */


2467.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
			} else if ((0+1) < valopts[op]) { /* required opt-val not found */


2468.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
			} else if ((0-1) < valopts[op]) { /* required opt-val not found */


2469.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			} else if (0 < valopts[op]) { /* required opt-val not found */
			break;


2470.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			} else if (0 < valopts[op]) { /* required opt-val not found */
			continue;


2471.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*} else if (0 < valopts[op]) { /* required opt-val not found */*/


2472.
if (\(.*\)) ==> if (!\1)

mutant:
			} else if (!(0 < valopts[op])) { /* required opt-val not found */


2473.
if (\(.*\)) ==> if (0==1)

mutant:
			} else if (0==1) { /* required opt-val not found */


2474.
if (\(.*\)) ==> if (1==1)

mutant:
			} else if (1==1) { /* required opt-val not found */


2475.
else ==> 

mutant:
			}  if (0 < valopts[op]) { /* required opt-val not found */


2476.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				fprintf(stderr, "Incomplete option %s\n", opts[op]);
				break;


2477.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				fprintf(stderr, "Incomplete option %s\n", opts[op]);
				continue;


2478.
".+" ==> ""

mutant:
				fprintf(stderr, "", opts[op]);


2479.
,([^,]+),([^,\)\]]+) ==> ,\2,\1

mutant:
				fprintf(stderr, opts[op, "Incomplete option %s\n"]);


2480.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
				fprintf( "Incomplete option %s\n",stderr, opts[op]);


2481.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*fprintf(stderr, "Incomplete option %s\n", opts[op]);*/


2482.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				printf("%s\n", "Pancake requires an input file. Use -f filename.txt");
				break;


2483.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				printf("%s\n", "Pancake requires an input file. Use -f filename.txt");
				continue;


2484.
".+" ==> ""

mutant:
				printf("");


2485.
".+" ==> ""

mutant:
				printf("%s\n"");


2486.
".+" ==> ""

mutant:
				printf("%s\n", "");


2487.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
				printf( "Pancake requires an input file. Use -f filename.txt","%s\n");


2488.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*printf("%s\n", "Pancake requires an input file. Use -f filename.txt");*/


2489.
(\D)(\d+)(\D) ==> \g<1>0\3

mutant:
				return 0;


2490.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
				return -1;


2491.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
				return (1+1);


2492.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
				return (1-1);


2493.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
				return 1;
				break;


2494.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
				return 1;
				continue;


2495.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
				/*return 1;*/


2496.
-([^>]) ==> +\1

mutant:
			} /* opt+val not required */


2497.
-([^>]) ==> *\1

mutant:
			} /* opt*val not required */


2498.
-([^>]) ==> /\1

mutant:
			} /* opt/val not required */


2499.
-([^>]) ==> %\1

mutant:
			} /* opt%val not required */


2500.
\* ==> +

mutant:
			} /+ opt-val not required */


2501.
\* ==> +

mutant:
			} /* opt-val not required +/


2502.
\* ==> -

mutant:
			} /- opt-val not required */


2503.
\* ==> -

mutant:
			} /* opt-val not required -/


2504.
\* ==> /

mutant:
			} // opt-val not required */


2505.
\* ==> /

mutant:
			} /* opt-val not required //


2506.
\* ==> %

mutant:
			} /% opt-val not required */


2507.
\* ==> %

mutant:
			} /* opt-val not required %/


2508.
-([^>]) ==> \1

mutant:
			} /* optval not required */


2509.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			} /* opt-val not required */
			break;


2510.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			} /* opt-val not required */
			continue;


2511.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*} /* opt-val not required */*/


2512.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


2513.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


2514.
\* ==> +

mutant:
		/+ tell us what to do here                   */


2515.
\* ==> +

mutant:
		/* tell us what to do here                   +/


2516.
\* ==> -

mutant:
		/- tell us what to do here                   */


2517.
\* ==> -

mutant:
		/* tell us what to do here                   -/


2518.
\* ==> /

mutant:
		// tell us what to do here                   */


2519.
\* ==> /

mutant:
		/* tell us what to do here                   //


2520.
\* ==> %

mutant:
		/% tell us what to do here                   */


2521.
\* ==> %

mutant:
		/* tell us what to do here                   %/


2522.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		/* tell us what to do here                   */
		break;


2523.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		/* tell us what to do here                   */
		continue;


2524.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*/* tell us what to do here                   */*/


2525.
\* ==> +

mutant:
		/+ set indicators/variables based on results */


2526.
\* ==> +

mutant:
		/* set indicators/variables based on results +/


2527.
\* ==> -

mutant:
		/- set indicators/variables based on results */


2528.
\* ==> -

mutant:
		/* set indicators/variables based on results -/


2529.
\* ==> /

mutant:
		// set indicators/variables based on results */


2530.
\* ==> /

mutant:
		/* set indicators/variables based on results //


2531.
\* ==> %

mutant:
		/% set indicators/variables based on results */


2532.
\* ==> %

mutant:
		/* set indicators/variables based on results %/


2533.
([^\*/])/([^\*/]) ==> \1+\2

mutant:
		/* set indicators+variables based on results */


2534.
([^\*/])/([^\*/]) ==> \1-\2

mutant:
		/* set indicators-variables based on results */


2535.
([^\*/])/([^\*/]) ==> \1*\2

mutant:
		/* set indicators*variables based on results */


2536.
([^\*/])/([^\*/]) ==> \1%\2

mutant:
		/* set indicators%variables based on results */


2537.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		/* set indicators/variables based on results */
		break;


2538.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		/* set indicators/variables based on results */
		continue;


2539.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*/* set indicators/variables based on results */*/


2540.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		switch (op) {
		break;


2541.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		switch (op) {
		continue;


2542.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*switch (op) {*/


2543.
-([^>]) ==> +\1

mutant:
		case 0: /* +d */


2544.
-([^>]) ==> *\1

mutant:
		case 0: /* *d */


2545.
-([^>]) ==> /\1

mutant:
		case 0: /* /d */


2546.
-([^>]) ==> %\1

mutant:
		case 0: /* %d */


2547.
\* ==> +

mutant:
		case 0: /+ -d */


2548.
\* ==> +

mutant:
		case 0: /* -d +/


2549.
\* ==> -

mutant:
		case 0: /- -d */


2550.
\* ==> -

mutant:
		case 0: /* -d -/


2551.
\* ==> /

mutant:
		case 0: // -d */


2552.
\* ==> /

mutant:
		case 0: /* -d //


2553.
\* ==> %

mutant:
		case 0: /% -d */


2554.
\* ==> %

mutant:
		case 0: /* -d %/


2555.
-([^>]) ==> \1

mutant:
		case 0: /* d */


2556.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
		case 1: /* -d */


2557.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
		case -1: /* -d */


2558.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
		case (0+1): /* -d */


2559.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
		case (0-1): /* -d */


2560.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		case 0: /* -d */
		break;


2561.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		case 0: /* -d */
		continue;


2562.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*case 0: /* -d */*/


2563.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			strcpy(_file, str);
			break;


2564.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			strcpy(_file, str);
			continue;


2565.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			strcpy( str,_file);


2566.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*strcpy(_file, str);*/


2567.
-([^>]) ==> +\1

mutant:
			break; /* +f */


2568.
-([^>]) ==> *\1

mutant:
			break; /* *f */


2569.
-([^>]) ==> /\1

mutant:
			break; /* /f */


2570.
-([^>]) ==> %\1

mutant:
			break; /* %f */


2571.
\* ==> +

mutant:
			break; /+ -f */


2572.
\* ==> +

mutant:
			break; /* -f +/


2573.
\* ==> -

mutant:
			break; /- -f */


2574.
\* ==> -

mutant:
			break; /* -f -/


2575.
\* ==> /

mutant:
			break; // -f */


2576.
\* ==> /

mutant:
			break; /* -f //


2577.
\* ==> %

mutant:
			break; /% -f */


2578.
\* ==> %

mutant:
			break; /* -f %/


2579.
-([^>]) ==> \1

mutant:
			break; /* f */


2580.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			break; /* -f */
			break;


2581.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			break; /* -f */
			continue;


2582.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*break; /* -f */*/


2583.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		default:
		break;


2584.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		default:
		continue;


2585.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*default:*/


2586.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
			fprintf(stderr, "Programmer: bad option in main:init_args:switch");
			break;


2587.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
			fprintf(stderr, "Programmer: bad option in main:init_args:switch");
			continue;


2588.
".+" ==> ""

mutant:
			fprintf(stderr, "");


2589.
\(([^,]+),([^,\)]+) ==> (\2,\1

mutant:
			fprintf( "Programmer: bad option in main:init_args:switch",stderr);


2590.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
			/*fprintf(stderr, "Programmer: bad option in main:init_args:switch");*/


2591.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		}
		break;


2592.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		}
		continue;


2593.
\+ ==> -

mutant:
		a-+; /* move to next valid arg-value position */


2594.
\+ ==> -

mutant:
		a+-; /* move to next valid arg-value position */


2595.
\+ ==> *

mutant:
		a*+; /* move to next valid arg-value position */


2596.
\+ ==> *

mutant:
		a+*; /* move to next valid arg-value position */


2597.
\+ ==> /

mutant:
		a/+; /* move to next valid arg-value position */


2598.
\+ ==> /

mutant:
		a+/; /* move to next valid arg-value position */


2599.
\+ ==> %

mutant:
		a%+; /* move to next valid arg-value position */


2600.
\+ ==> %

mutant:
		a+%; /* move to next valid arg-value position */


2601.
-([^>]) ==> +\1

mutant:
		a++; /* move to next valid arg+value position */


2602.
-([^>]) ==> *\1

mutant:
		a++; /* move to next valid arg*value position */


2603.
-([^>]) ==> /\1

mutant:
		a++; /* move to next valid arg/value position */


2604.
-([^>]) ==> %\1

mutant:
		a++; /* move to next valid arg%value position */


2605.
\* ==> +

mutant:
		a++; /+ move to next valid arg-value position */


2606.
\* ==> +

mutant:
		a++; /* move to next valid arg-value position +/


2607.
\* ==> -

mutant:
		a++; /- move to next valid arg-value position */


2608.
\* ==> -

mutant:
		a++; /* move to next valid arg-value position -/


2609.
\* ==> /

mutant:
		a++; // move to next valid arg-value position */


2610.
\* ==> /

mutant:
		a++; /* move to next valid arg-value position //


2611.
\* ==> %

mutant:
		a++; /% move to next valid arg-value position */


2612.
\* ==> %

mutant:
		a++; /* move to next valid arg-value position %/


2613.
\+\+ ==> --

mutant:
		a--; /* move to next valid arg-value position */


2614.
-([^>]) ==> \1

mutant:
		a++; /* move to next valid argvalue position */


2615.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
		a++; /* move to next valid arg-value position */
		break;


2616.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
		a++; /* move to next valid arg-value position */
		continue;


2617.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
		/*a++; /* move to next valid arg-value position */*/


2618.
\* ==> +

mutant:
	} /+ end for(i) */


2619.
\* ==> +

mutant:
	} /* end for(i) +/


2620.
\* ==> -

mutant:
	} /- end for(i) */


2621.
\* ==> -

mutant:
	} /* end for(i) -/


2622.
\* ==> /

mutant:
	} // end for(i) */


2623.
\* ==> /

mutant:
	} /* end for(i) //


2624.
\* ==> %

mutant:
	} /% end for(i) */


2625.
\* ==> %

mutant:
	} /* end for(i) %/


2626.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	} /* end for(i) */
	break;


2627.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	} /* end for(i) */
	continue;


2628.
end ==> begin

mutant:
	} /* begin for(i) */


2629.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*} /* end for(i) */*/


2630.
(\D)(\d+)(\D) ==> \g<1>1\3

mutant:
	return 1;


2631.
(\D)(\d+)(\D) ==> \g<1>-1\3

mutant:
	return -1;


2632.
(\D)(\d+)(\D) ==> \1(\2+1)\3

mutant:
	return (0+1);


2633.
(\D)(\d+)(\D) ==> \1(\2-1)\3

mutant:
	return (0-1);


2634.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
	return 0;
	break;


2635.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
	return 0;
	continue;


2636.
(^\s*)(\S+[^{}]+.*)\n ==> \1/*\2*/\n

mutant:
	/*return 0;*/


2637.
(^\s*)(\S+.*)\n ==> \1\2\n\1break;\n

mutant:
}
break;


2638.
(^\s*)(\S+.*)\n ==> \1\2\n\1continue;\n

mutant:
}
continue;


